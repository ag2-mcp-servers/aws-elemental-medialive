# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:38:31+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class AacCodingMode(Enum):
    AD_RECEIVER_MIX = 'AD_RECEIVER_MIX'
    CODING_MODE_1_0 = 'CODING_MODE_1_0'
    CODING_MODE_1_1 = 'CODING_MODE_1_1'
    CODING_MODE_2_0 = 'CODING_MODE_2_0'
    CODING_MODE_5_1 = 'CODING_MODE_5_1'


class AacInputType(Enum):
    BROADCASTER_MIXED_AD = 'BROADCASTER_MIXED_AD'
    NORMAL = 'NORMAL'


class AacProfile(Enum):
    HEV1 = 'HEV1'
    HEV2 = 'HEV2'
    LC = 'LC'


class AacRateControlMode(Enum):
    CBR = 'CBR'
    VBR = 'VBR'


class AacRawFormat(Enum):
    LATM_LOAS = 'LATM_LOAS'
    NONE = 'NONE'


class AacSpec(Enum):
    MPEG2 = 'MPEG2'
    MPEG4 = 'MPEG4'


class AacVbrQuality(Enum):
    HIGH = 'HIGH'
    LOW = 'LOW'
    MEDIUM_HIGH = 'MEDIUM_HIGH'
    MEDIUM_LOW = 'MEDIUM_LOW'


class Ac3BitstreamMode(Enum):
    COMMENTARY = 'COMMENTARY'
    COMPLETE_MAIN = 'COMPLETE_MAIN'
    DIALOGUE = 'DIALOGUE'
    EMERGENCY = 'EMERGENCY'
    HEARING_IMPAIRED = 'HEARING_IMPAIRED'
    MUSIC_AND_EFFECTS = 'MUSIC_AND_EFFECTS'
    VISUALLY_IMPAIRED = 'VISUALLY_IMPAIRED'
    VOICE_OVER = 'VOICE_OVER'


class Ac3CodingMode(Enum):
    CODING_MODE_1_0 = 'CODING_MODE_1_0'
    CODING_MODE_1_1 = 'CODING_MODE_1_1'
    CODING_MODE_2_0 = 'CODING_MODE_2_0'
    CODING_MODE_3_2_LFE = 'CODING_MODE_3_2_LFE'


class Ac3DrcProfile(Enum):
    FILM_STANDARD = 'FILM_STANDARD'
    NONE = 'NONE'


class Ac3LfeFilter(Enum):
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'


class Ac3MetadataControl(Enum):
    FOLLOW_INPUT = 'FOLLOW_INPUT'
    USE_CONFIGURED = 'USE_CONFIGURED'


class AcceptHeader(Enum):
    image_jpeg = 'image/jpeg'


class AcceptInputDeviceTransferRequest(BaseModel):
    pass


class AcceptInputDeviceTransferResponse(BaseModel):
    pass


class AccessibilityType(Enum):
    DOES_NOT_IMPLEMENT_ACCESSIBILITY_FEATURES = (
        'DOES_NOT_IMPLEMENT_ACCESSIBILITY_FEATURES'
    )
    IMPLEMENTS_ACCESSIBILITY_FEATURES = 'IMPLEMENTS_ACCESSIBILITY_FEATURES'


class AfdSignaling(Enum):
    AUTO = 'AUTO'
    FIXED = 'FIXED'
    NONE = 'NONE'


class AribDestinationSettings(BaseModel):
    pass


class AribSourceSettings(BaseModel):
    pass


class AudioDescriptionAudioTypeControl(Enum):
    FOLLOW_INPUT = 'FOLLOW_INPUT'
    USE_CONFIGURED = 'USE_CONFIGURED'


class AudioDescriptionLanguageCodeControl(Enum):
    FOLLOW_INPUT = 'FOLLOW_INPUT'
    USE_CONFIGURED = 'USE_CONFIGURED'


class AudioLanguageSelectionPolicy(Enum):
    LOOSE = 'LOOSE'
    STRICT = 'STRICT'


class AudioNormalizationAlgorithm(Enum):
    ITU_1770_1 = 'ITU_1770_1'
    ITU_1770_2 = 'ITU_1770_2'


class AudioNormalizationAlgorithmControl(Enum):
    CORRECT_AUDIO = 'CORRECT_AUDIO'


class AudioOnlyHlsSegmentType(Enum):
    AAC = 'AAC'
    FMP4 = 'FMP4'


class AudioOnlyHlsTrackType(Enum):
    ALTERNATE_AUDIO_AUTO_SELECT = 'ALTERNATE_AUDIO_AUTO_SELECT'
    ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT = 'ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT'
    ALTERNATE_AUDIO_NOT_AUTO_SELECT = 'ALTERNATE_AUDIO_NOT_AUTO_SELECT'
    AUDIO_ONLY_VARIANT_STREAM = 'AUDIO_ONLY_VARIANT_STREAM'


class AudioType(Enum):
    CLEAN_EFFECTS = 'CLEAN_EFFECTS'
    HEARING_IMPAIRED = 'HEARING_IMPAIRED'
    UNDEFINED = 'UNDEFINED'
    VISUAL_IMPAIRED_COMMENTARY = 'VISUAL_IMPAIRED_COMMENTARY'


class AuthenticationScheme(Enum):
    AKAMAI = 'AKAMAI'
    COMMON = 'COMMON'


class AvailBlankingState(Enum):
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'


class BadGatewayException(RootModel[Any]):
    root: Any


class BadRequestException(RootModel[Any]):
    root: Any


class BlackoutSlateNetworkEndBlackout(Enum):
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'


class BlackoutSlateState(Enum):
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'


class BurnInAlignment(Enum):
    CENTERED = 'CENTERED'
    LEFT = 'LEFT'
    SMART = 'SMART'


class BurnInBackgroundColor(Enum):
    BLACK = 'BLACK'
    NONE = 'NONE'
    WHITE = 'WHITE'


class BurnInFontColor(Enum):
    BLACK = 'BLACK'
    BLUE = 'BLUE'
    GREEN = 'GREEN'
    RED = 'RED'
    WHITE = 'WHITE'
    YELLOW = 'YELLOW'


class BurnInOutlineColor(Enum):
    BLACK = 'BLACK'
    BLUE = 'BLUE'
    GREEN = 'GREEN'
    RED = 'RED'
    WHITE = 'WHITE'
    YELLOW = 'YELLOW'


class BurnInShadowColor(Enum):
    BLACK = 'BLACK'
    NONE = 'NONE'
    WHITE = 'WHITE'


class BurnInTeletextGridControl(Enum):
    FIXED = 'FIXED'
    SCALED = 'SCALED'


class CancelInputDeviceTransferRequest(BaseModel):
    pass


class CancelInputDeviceTransferResponse(BaseModel):
    pass


class CdiInputResolution(Enum):
    SD = 'SD'
    HD = 'HD'
    FHD = 'FHD'
    UHD = 'UHD'


class CdiInputSpecification(BaseModel):
    Resolution: Optional[CdiInputResolution] = None


class ChannelClass(Enum):
    STANDARD = 'STANDARD'
    SINGLE_PIPELINE = 'SINGLE_PIPELINE'


class ChannelState(Enum):
    CREATING = 'CREATING'
    CREATE_FAILED = 'CREATE_FAILED'
    IDLE = 'IDLE'
    STARTING = 'STARTING'
    RUNNING = 'RUNNING'
    RECOVERING = 'RECOVERING'
    STOPPING = 'STOPPING'
    DELETING = 'DELETING'
    DELETED = 'DELETED'
    UPDATING = 'UPDATING'
    UPDATE_FAILED = 'UPDATE_FAILED'


class ClaimDeviceResponse(BaseModel):
    pass


class ColorSpacePassthroughSettings(BaseModel):
    pass


class ConflictException(RootModel[Any]):
    root: Any


class ContentType(Enum):
    image_jpeg = 'image/jpeg'


class DeleteChannelRequest(BaseModel):
    pass


class DeleteInputRequest(BaseModel):
    pass


class DeleteInputResponse(BaseModel):
    pass


class DeleteInputSecurityGroupRequest(BaseModel):
    pass


class DeleteInputSecurityGroupResponse(BaseModel):
    pass


class DeleteMultiplexProgramRequest(BaseModel):
    pass


class DeleteMultiplexRequest(BaseModel):
    pass


class DeleteReservationRequest(BaseModel):
    pass


class DeleteScheduleRequest(BaseModel):
    pass


class DeleteScheduleResponse(BaseModel):
    pass


class DeleteTagsRequest(BaseModel):
    pass


class DescribeChannelRequest(BaseModel):
    pass


class DescribeInputDeviceRequest(BaseModel):
    pass


class DescribeInputDeviceThumbnailRequest(BaseModel):
    pass


class DescribeInputRequest(BaseModel):
    pass


class DescribeInputSecurityGroupRequest(BaseModel):
    pass


class DescribeMultiplexProgramRequest(BaseModel):
    pass


class DescribeMultiplexRequest(BaseModel):
    pass


class DescribeOfferingRequest(BaseModel):
    pass


class DescribeReservationRequest(BaseModel):
    pass


class DescribeScheduleRequest(BaseModel):
    pass


class DeviceSettingsSyncState(Enum):
    SYNCED = 'SYNCED'
    SYNCING = 'SYNCING'


class DeviceUpdateStatus(Enum):
    UP_TO_DATE = 'UP_TO_DATE'
    NOT_UP_TO_DATE = 'NOT_UP_TO_DATE'
    UPDATING = 'UPDATING'


class DolbyEProgramSelection(Enum):
    ALL_CHANNELS = 'ALL_CHANNELS'
    PROGRAM_1 = 'PROGRAM_1'
    PROGRAM_2 = 'PROGRAM_2'
    PROGRAM_3 = 'PROGRAM_3'
    PROGRAM_4 = 'PROGRAM_4'
    PROGRAM_5 = 'PROGRAM_5'
    PROGRAM_6 = 'PROGRAM_6'
    PROGRAM_7 = 'PROGRAM_7'
    PROGRAM_8 = 'PROGRAM_8'


class DolbyVision81Settings(BaseModel):
    pass


class DvbSdtOutputSdt(Enum):
    SDT_FOLLOW = 'SDT_FOLLOW'
    SDT_FOLLOW_IF_PRESENT = 'SDT_FOLLOW_IF_PRESENT'
    SDT_MANUAL = 'SDT_MANUAL'
    SDT_NONE = 'SDT_NONE'


class DvbSubDestinationAlignment(Enum):
    CENTERED = 'CENTERED'
    LEFT = 'LEFT'
    SMART = 'SMART'


class DvbSubDestinationBackgroundColor(Enum):
    BLACK = 'BLACK'
    NONE = 'NONE'
    WHITE = 'WHITE'


class DvbSubDestinationFontColor(Enum):
    BLACK = 'BLACK'
    BLUE = 'BLUE'
    GREEN = 'GREEN'
    RED = 'RED'
    WHITE = 'WHITE'
    YELLOW = 'YELLOW'


class DvbSubDestinationOutlineColor(Enum):
    BLACK = 'BLACK'
    BLUE = 'BLUE'
    GREEN = 'GREEN'
    RED = 'RED'
    WHITE = 'WHITE'
    YELLOW = 'YELLOW'


class DvbSubDestinationShadowColor(Enum):
    BLACK = 'BLACK'
    NONE = 'NONE'
    WHITE = 'WHITE'


class DvbSubDestinationTeletextGridControl(Enum):
    FIXED = 'FIXED'
    SCALED = 'SCALED'


class DvbSubOcrLanguage(Enum):
    DEU = 'DEU'
    ENG = 'ENG'
    FRA = 'FRA'
    NLD = 'NLD'
    POR = 'POR'
    SPA = 'SPA'


class Eac3AtmosCodingMode(Enum):
    CODING_MODE_5_1_4 = 'CODING_MODE_5_1_4'
    CODING_MODE_7_1_4 = 'CODING_MODE_7_1_4'
    CODING_MODE_9_1_6 = 'CODING_MODE_9_1_6'


class Eac3AtmosDrcLine(Enum):
    FILM_LIGHT = 'FILM_LIGHT'
    FILM_STANDARD = 'FILM_STANDARD'
    MUSIC_LIGHT = 'MUSIC_LIGHT'
    MUSIC_STANDARD = 'MUSIC_STANDARD'
    NONE = 'NONE'
    SPEECH = 'SPEECH'


class Eac3AtmosDrcRf(Enum):
    FILM_LIGHT = 'FILM_LIGHT'
    FILM_STANDARD = 'FILM_STANDARD'
    MUSIC_LIGHT = 'MUSIC_LIGHT'
    MUSIC_STANDARD = 'MUSIC_STANDARD'
    NONE = 'NONE'
    SPEECH = 'SPEECH'


class Eac3AttenuationControl(Enum):
    ATTENUATE_3_DB = 'ATTENUATE_3_DB'
    NONE = 'NONE'


class Eac3BitstreamMode(Enum):
    COMMENTARY = 'COMMENTARY'
    COMPLETE_MAIN = 'COMPLETE_MAIN'
    EMERGENCY = 'EMERGENCY'
    HEARING_IMPAIRED = 'HEARING_IMPAIRED'
    VISUALLY_IMPAIRED = 'VISUALLY_IMPAIRED'


class Eac3CodingMode(Enum):
    CODING_MODE_1_0 = 'CODING_MODE_1_0'
    CODING_MODE_2_0 = 'CODING_MODE_2_0'
    CODING_MODE_3_2 = 'CODING_MODE_3_2'


class Eac3DcFilter(Enum):
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'


class Eac3DrcLine(Enum):
    FILM_LIGHT = 'FILM_LIGHT'
    FILM_STANDARD = 'FILM_STANDARD'
    MUSIC_LIGHT = 'MUSIC_LIGHT'
    MUSIC_STANDARD = 'MUSIC_STANDARD'
    NONE = 'NONE'
    SPEECH = 'SPEECH'


class Eac3DrcRf(Enum):
    FILM_LIGHT = 'FILM_LIGHT'
    FILM_STANDARD = 'FILM_STANDARD'
    MUSIC_LIGHT = 'MUSIC_LIGHT'
    MUSIC_STANDARD = 'MUSIC_STANDARD'
    NONE = 'NONE'
    SPEECH = 'SPEECH'


class Eac3LfeControl(Enum):
    LFE = 'LFE'
    NO_LFE = 'NO_LFE'


class Eac3LfeFilter(Enum):
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'


class Eac3MetadataControl(Enum):
    FOLLOW_INPUT = 'FOLLOW_INPUT'
    USE_CONFIGURED = 'USE_CONFIGURED'


class Eac3PassthroughControl(Enum):
    NO_PASSTHROUGH = 'NO_PASSTHROUGH'
    WHEN_POSSIBLE = 'WHEN_POSSIBLE'


class Eac3PhaseControl(Enum):
    NO_SHIFT = 'NO_SHIFT'
    SHIFT_90_DEGREES = 'SHIFT_90_DEGREES'


class Eac3StereoDownmix(Enum):
    DPL2 = 'DPL2'
    LO_RO = 'LO_RO'
    LT_RT = 'LT_RT'
    NOT_INDICATED = 'NOT_INDICATED'


class Eac3SurroundExMode(Enum):
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'
    NOT_INDICATED = 'NOT_INDICATED'


class Eac3SurroundMode(Enum):
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'
    NOT_INDICATED = 'NOT_INDICATED'


class EbuTtDDestinationStyleControl(Enum):
    EXCLUDE = 'EXCLUDE'
    INCLUDE = 'INCLUDE'


class EbuTtDFillLineGapControl(Enum):
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'


class EmbeddedConvert608To708(Enum):
    DISABLED = 'DISABLED'
    UPCONVERT = 'UPCONVERT'


class EmbeddedDestinationSettings(BaseModel):
    pass


class EmbeddedPlusScte20DestinationSettings(BaseModel):
    pass


class EmbeddedScte20Detection(Enum):
    AUTO = 'AUTO'
    OFF = 'OFF'


class FeatureActivationsInputPrepareScheduleActions(Enum):
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'


class FecOutputIncludeFec(Enum):
    COLUMN = 'COLUMN'
    COLUMN_AND_ROW = 'COLUMN_AND_ROW'


class FixedAfd(Enum):
    AFD_0000 = 'AFD_0000'
    AFD_0010 = 'AFD_0010'
    AFD_0011 = 'AFD_0011'
    AFD_0100 = 'AFD_0100'
    AFD_1000 = 'AFD_1000'
    AFD_1001 = 'AFD_1001'
    AFD_1010 = 'AFD_1010'
    AFD_1011 = 'AFD_1011'
    AFD_1101 = 'AFD_1101'
    AFD_1110 = 'AFD_1110'
    AFD_1111 = 'AFD_1111'


class Fmp4NielsenId3Behavior(Enum):
    NO_PASSTHROUGH = 'NO_PASSTHROUGH'
    PASSTHROUGH = 'PASSTHROUGH'


class Fmp4TimedMetadataBehavior(Enum):
    NO_PASSTHROUGH = 'NO_PASSTHROUGH'
    PASSTHROUGH = 'PASSTHROUGH'


class FollowPoint(Enum):
    END = 'END'
    START = 'START'


class ForbiddenException(RootModel[Any]):
    root: Any


class FrameCaptureHlsSettings(BaseModel):
    pass


class FrameCaptureIntervalUnit(Enum):
    MILLISECONDS = 'MILLISECONDS'
    SECONDS = 'SECONDS'


class GatewayTimeoutException(RootModel[Any]):
    root: Any


class GlobalConfigurationInputEndAction(Enum):
    NONE = 'NONE'
    SWITCH_AND_LOOP_INPUTS = 'SWITCH_AND_LOOP_INPUTS'


class GlobalConfigurationLowFramerateInputs(Enum):
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'


class GlobalConfigurationOutputLockingMode(Enum):
    EPOCH_LOCKING = 'EPOCH_LOCKING'
    PIPELINE_LOCKING = 'PIPELINE_LOCKING'


class GlobalConfigurationOutputTimingSource(Enum):
    INPUT_CLOCK = 'INPUT_CLOCK'
    SYSTEM_CLOCK = 'SYSTEM_CLOCK'


class H264AdaptiveQuantization(Enum):
    AUTO = 'AUTO'
    HIGH = 'HIGH'
    HIGHER = 'HIGHER'
    LOW = 'LOW'
    MAX = 'MAX'
    MEDIUM = 'MEDIUM'
    OFF = 'OFF'


class H264ColorMetadata(Enum):
    IGNORE = 'IGNORE'
    INSERT = 'INSERT'


class H264EntropyEncoding(Enum):
    CABAC = 'CABAC'
    CAVLC = 'CAVLC'


class H264FlickerAq(Enum):
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'


class H264ForceFieldPictures(Enum):
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'


class H264FramerateControl(Enum):
    INITIALIZE_FROM_SOURCE = 'INITIALIZE_FROM_SOURCE'
    SPECIFIED = 'SPECIFIED'


class H264GopBReference(Enum):
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'


class H264GopSizeUnits(Enum):
    FRAMES = 'FRAMES'
    SECONDS = 'SECONDS'


class H264Level(Enum):
    H264_LEVEL_1 = 'H264_LEVEL_1'
    H264_LEVEL_1_1 = 'H264_LEVEL_1_1'
    H264_LEVEL_1_2 = 'H264_LEVEL_1_2'
    H264_LEVEL_1_3 = 'H264_LEVEL_1_3'
    H264_LEVEL_2 = 'H264_LEVEL_2'
    H264_LEVEL_2_1 = 'H264_LEVEL_2_1'
    H264_LEVEL_2_2 = 'H264_LEVEL_2_2'
    H264_LEVEL_3 = 'H264_LEVEL_3'
    H264_LEVEL_3_1 = 'H264_LEVEL_3_1'
    H264_LEVEL_3_2 = 'H264_LEVEL_3_2'
    H264_LEVEL_4 = 'H264_LEVEL_4'
    H264_LEVEL_4_1 = 'H264_LEVEL_4_1'
    H264_LEVEL_4_2 = 'H264_LEVEL_4_2'
    H264_LEVEL_5 = 'H264_LEVEL_5'
    H264_LEVEL_5_1 = 'H264_LEVEL_5_1'
    H264_LEVEL_5_2 = 'H264_LEVEL_5_2'
    H264_LEVEL_AUTO = 'H264_LEVEL_AUTO'


class H264LookAheadRateControl(Enum):
    HIGH = 'HIGH'
    LOW = 'LOW'
    MEDIUM = 'MEDIUM'


class H264ParControl(Enum):
    INITIALIZE_FROM_SOURCE = 'INITIALIZE_FROM_SOURCE'
    SPECIFIED = 'SPECIFIED'


class H264Profile(Enum):
    BASELINE = 'BASELINE'
    HIGH = 'HIGH'
    HIGH_10BIT = 'HIGH_10BIT'
    HIGH_422 = 'HIGH_422'
    HIGH_422_10BIT = 'HIGH_422_10BIT'
    MAIN = 'MAIN'


class H264QualityLevel(Enum):
    ENHANCED_QUALITY = 'ENHANCED_QUALITY'
    STANDARD_QUALITY = 'STANDARD_QUALITY'


class H264RateControlMode(Enum):
    CBR = 'CBR'
    MULTIPLEX = 'MULTIPLEX'
    QVBR = 'QVBR'
    VBR = 'VBR'


class H264ScanType(Enum):
    INTERLACED = 'INTERLACED'
    PROGRESSIVE = 'PROGRESSIVE'


class H264SceneChangeDetect(Enum):
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'


class H264SpatialAq(Enum):
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'


class H264SubGopLength(Enum):
    DYNAMIC = 'DYNAMIC'
    FIXED = 'FIXED'


class H264Syntax(Enum):
    DEFAULT = 'DEFAULT'
    RP2027 = 'RP2027'


class H264TemporalAq(Enum):
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'


class H264TimecodeInsertionBehavior(Enum):
    DISABLED = 'DISABLED'
    PIC_TIMING_SEI = 'PIC_TIMING_SEI'


class H265AdaptiveQuantization(Enum):
    AUTO = 'AUTO'
    HIGH = 'HIGH'
    HIGHER = 'HIGHER'
    LOW = 'LOW'
    MAX = 'MAX'
    MEDIUM = 'MEDIUM'
    OFF = 'OFF'


class H265AlternativeTransferFunction(Enum):
    INSERT = 'INSERT'
    OMIT = 'OMIT'


class H265ColorMetadata(Enum):
    IGNORE = 'IGNORE'
    INSERT = 'INSERT'


class H265FlickerAq(Enum):
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'


class H265GopSizeUnits(Enum):
    FRAMES = 'FRAMES'
    SECONDS = 'SECONDS'


class H265Level(Enum):
    H265_LEVEL_1 = 'H265_LEVEL_1'
    H265_LEVEL_2 = 'H265_LEVEL_2'
    H265_LEVEL_2_1 = 'H265_LEVEL_2_1'
    H265_LEVEL_3 = 'H265_LEVEL_3'
    H265_LEVEL_3_1 = 'H265_LEVEL_3_1'
    H265_LEVEL_4 = 'H265_LEVEL_4'
    H265_LEVEL_4_1 = 'H265_LEVEL_4_1'
    H265_LEVEL_5 = 'H265_LEVEL_5'
    H265_LEVEL_5_1 = 'H265_LEVEL_5_1'
    H265_LEVEL_5_2 = 'H265_LEVEL_5_2'
    H265_LEVEL_6 = 'H265_LEVEL_6'
    H265_LEVEL_6_1 = 'H265_LEVEL_6_1'
    H265_LEVEL_6_2 = 'H265_LEVEL_6_2'
    H265_LEVEL_AUTO = 'H265_LEVEL_AUTO'


class H265LookAheadRateControl(Enum):
    HIGH = 'HIGH'
    LOW = 'LOW'
    MEDIUM = 'MEDIUM'


class H265Profile(Enum):
    MAIN = 'MAIN'
    MAIN_10BIT = 'MAIN_10BIT'


class H265RateControlMode(Enum):
    CBR = 'CBR'
    MULTIPLEX = 'MULTIPLEX'
    QVBR = 'QVBR'


class H265ScanType(Enum):
    INTERLACED = 'INTERLACED'
    PROGRESSIVE = 'PROGRESSIVE'


class H265SceneChangeDetect(Enum):
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'


class H265Tier(Enum):
    HIGH = 'HIGH'
    MAIN = 'MAIN'


class H265TimecodeInsertionBehavior(Enum):
    DISABLED = 'DISABLED'
    PIC_TIMING_SEI = 'PIC_TIMING_SEI'


class HlsAdMarkers(Enum):
    ADOBE = 'ADOBE'
    ELEMENTAL = 'ELEMENTAL'
    ELEMENTAL_SCTE35 = 'ELEMENTAL_SCTE35'


class HlsAkamaiHttpTransferMode(Enum):
    CHUNKED = 'CHUNKED'
    NON_CHUNKED = 'NON_CHUNKED'


class HlsCaptionLanguageSetting(Enum):
    INSERT = 'INSERT'
    NONE = 'NONE'
    OMIT = 'OMIT'


class HlsClientCache(Enum):
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'


class HlsCodecSpecification(Enum):
    RFC_4281 = 'RFC_4281'
    RFC_6381 = 'RFC_6381'


class HlsDirectoryStructure(Enum):
    SINGLE_DIRECTORY = 'SINGLE_DIRECTORY'
    SUBDIRECTORY_PER_STREAM = 'SUBDIRECTORY_PER_STREAM'


class HlsDiscontinuityTags(Enum):
    INSERT = 'INSERT'
    NEVER_INSERT = 'NEVER_INSERT'


class HlsEncryptionType(Enum):
    AES128 = 'AES128'
    SAMPLE_AES = 'SAMPLE_AES'


class HlsH265PackagingType(Enum):
    HEV1 = 'HEV1'
    HVC1 = 'HVC1'


class HlsId3SegmentTaggingState(Enum):
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'


class HlsIncompleteSegmentBehavior(Enum):
    AUTO = 'AUTO'
    SUPPRESS = 'SUPPRESS'


class HlsIvInManifest(Enum):
    EXCLUDE = 'EXCLUDE'
    INCLUDE = 'INCLUDE'


class HlsIvSource(Enum):
    EXPLICIT = 'EXPLICIT'
    FOLLOWS_SEGMENT_NUMBER = 'FOLLOWS_SEGMENT_NUMBER'


class HlsManifestCompression(Enum):
    GZIP = 'GZIP'
    NONE = 'NONE'


class HlsManifestDurationFormat(Enum):
    FLOATING_POINT = 'FLOATING_POINT'
    INTEGER = 'INTEGER'


class HlsMediaStoreStorageClass(Enum):
    TEMPORAL = 'TEMPORAL'


class HlsMode(Enum):
    LIVE = 'LIVE'
    VOD = 'VOD'


class HlsOutputSelection(Enum):
    MANIFESTS_AND_SEGMENTS = 'MANIFESTS_AND_SEGMENTS'
    SEGMENTS_ONLY = 'SEGMENTS_ONLY'
    VARIANT_MANIFESTS_AND_SEGMENTS = 'VARIANT_MANIFESTS_AND_SEGMENTS'


class HlsProgramDateTime(Enum):
    EXCLUDE = 'EXCLUDE'
    INCLUDE = 'INCLUDE'


class HlsProgramDateTimeClock(Enum):
    INITIALIZE_FROM_OUTPUT_TIMECODE = 'INITIALIZE_FROM_OUTPUT_TIMECODE'
    SYSTEM_CLOCK = 'SYSTEM_CLOCK'


class HlsRedundantManifest(Enum):
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'


class HlsScte35SourceType(Enum):
    MANIFEST = 'MANIFEST'
    SEGMENTS = 'SEGMENTS'


class HlsSegmentationMode(Enum):
    USE_INPUT_SEGMENTATION = 'USE_INPUT_SEGMENTATION'
    USE_SEGMENT_DURATION = 'USE_SEGMENT_DURATION'


class HlsStreamInfResolution(Enum):
    EXCLUDE = 'EXCLUDE'
    INCLUDE = 'INCLUDE'


class HlsTimedMetadataId3Frame(Enum):
    NONE = 'NONE'
    PRIV = 'PRIV'
    TDRL = 'TDRL'


class HlsTsFileMode(Enum):
    SEGMENTED_FILES = 'SEGMENTED_FILES'
    SINGLE_FILE = 'SINGLE_FILE'


class HlsWebdavHttpTransferMode(Enum):
    CHUNKED = 'CHUNKED'
    NON_CHUNKED = 'NON_CHUNKED'


class HtmlMotionGraphicsSettings(BaseModel):
    pass


class IFrameOnlyPlaylistType(Enum):
    DISABLED = 'DISABLED'
    STANDARD = 'STANDARD'


class ImmediateModeScheduleActionStartSettings(BaseModel):
    pass


class InputClass(Enum):
    STANDARD = 'STANDARD'
    SINGLE_PIPELINE = 'SINGLE_PIPELINE'


class InputCodec(Enum):
    MPEG2 = 'MPEG2'
    AVC = 'AVC'
    HEVC = 'HEVC'


class InputDeblockFilter(Enum):
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'


class InputDenoiseFilter(Enum):
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'


class InputDeviceActiveInput(Enum):
    HDMI = 'HDMI'
    SDI = 'SDI'


class InputDeviceConfiguredInput(Enum):
    AUTO = 'AUTO'
    HDMI = 'HDMI'
    SDI = 'SDI'


class InputDeviceConnectionState(Enum):
    DISCONNECTED = 'DISCONNECTED'
    CONNECTED = 'CONNECTED'


class InputDeviceIpScheme(Enum):
    STATIC = 'STATIC'
    DHCP = 'DHCP'


class InputDeviceScanType(Enum):
    INTERLACED = 'INTERLACED'
    PROGRESSIVE = 'PROGRESSIVE'


class InputDeviceState(Enum):
    IDLE = 'IDLE'
    STREAMING = 'STREAMING'


class InputDeviceThumbnail(RootModel[str]):
    root: str = Field(
        ...,
        description='The binary data for the thumbnail that the Link device has most recently sent to MediaLive.',
    )


class InputDeviceTransferType(Enum):
    OUTGOING = 'OUTGOING'
    INCOMING = 'INCOMING'


class InputDeviceType(Enum):
    HD = 'HD'
    UHD = 'UHD'


class InputFilter(Enum):
    AUTO = 'AUTO'
    DISABLED = 'DISABLED'
    FORCED = 'FORCED'


class InputLossActionForHlsOut(Enum):
    EMIT_OUTPUT = 'EMIT_OUTPUT'
    PAUSE_OUTPUT = 'PAUSE_OUTPUT'


class InputLossActionForMsSmoothOut(Enum):
    EMIT_OUTPUT = 'EMIT_OUTPUT'
    PAUSE_OUTPUT = 'PAUSE_OUTPUT'


class InputLossActionForRtmpOut(Enum):
    EMIT_OUTPUT = 'EMIT_OUTPUT'
    PAUSE_OUTPUT = 'PAUSE_OUTPUT'


class InputLossActionForUdpOut(Enum):
    DROP_PROGRAM = 'DROP_PROGRAM'
    DROP_TS = 'DROP_TS'
    EMIT_PROGRAM = 'EMIT_PROGRAM'


class InputLossImageType(Enum):
    COLOR = 'COLOR'
    SLATE = 'SLATE'


class InputMaximumBitrate(Enum):
    MAX_10_MBPS = 'MAX_10_MBPS'
    MAX_20_MBPS = 'MAX_20_MBPS'
    MAX_50_MBPS = 'MAX_50_MBPS'


class InputPreference(Enum):
    EQUAL_INPUT_PREFERENCE = 'EQUAL_INPUT_PREFERENCE'
    PRIMARY_INPUT_PREFERRED = 'PRIMARY_INPUT_PREFERRED'


class InputResolution(Enum):
    SD = 'SD'
    HD = 'HD'
    UHD = 'UHD'


class InputSecurityGroupState(Enum):
    IDLE = 'IDLE'
    IN_USE = 'IN_USE'
    UPDATING = 'UPDATING'
    DELETED = 'DELETED'


class InputSourceEndBehavior(Enum):
    CONTINUE = 'CONTINUE'
    LOOP = 'LOOP'


class InputSourceType(Enum):
    STATIC = 'STATIC'
    DYNAMIC = 'DYNAMIC'


class InputSpecification(BaseModel):
    Codec: Optional[InputCodec] = None
    MaximumBitrate: Optional[InputMaximumBitrate] = None
    Resolution: Optional[InputResolution] = None


class InputState(Enum):
    CREATING = 'CREATING'
    DETACHED = 'DETACHED'
    ATTACHED = 'ATTACHED'
    DELETING = 'DELETING'
    DELETED = 'DELETED'


class InputTimecodeSource(Enum):
    ZEROBASED = 'ZEROBASED'
    EMBEDDED = 'EMBEDDED'


class InputType(Enum):
    UDP_PUSH = 'UDP_PUSH'
    RTP_PUSH = 'RTP_PUSH'
    RTMP_PUSH = 'RTMP_PUSH'
    RTMP_PULL = 'RTMP_PULL'
    URL_PULL = 'URL_PULL'
    MP4_FILE = 'MP4_FILE'
    MEDIACONNECT = 'MEDIACONNECT'
    INPUT_DEVICE = 'INPUT_DEVICE'
    AWS_CDI = 'AWS_CDI'
    TS_FILE = 'TS_FILE'


class InternalServerErrorException(RootModel[Any]):
    root: Any


class LastFrameClippingBehavior(Enum):
    EXCLUDE_LAST_FRAME = 'EXCLUDE_LAST_FRAME'
    INCLUDE_LAST_FRAME = 'INCLUDE_LAST_FRAME'


class ListChannelsRequest(BaseModel):
    pass


class ListInputDeviceTransfersRequest(BaseModel):
    pass


class ListInputDevicesRequest(BaseModel):
    pass


class ListInputSecurityGroupsRequest(BaseModel):
    pass


class ListInputsRequest(BaseModel):
    pass


class ListMultiplexProgramsRequest(BaseModel):
    pass


class ListMultiplexesRequest(BaseModel):
    pass


class ListOfferingsRequest(BaseModel):
    pass


class ListReservationsRequest(BaseModel):
    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class LogLevel(Enum):
    ERROR = 'ERROR'
    WARNING = 'WARNING'
    INFO = 'INFO'
    DEBUG = 'DEBUG'
    DISABLED = 'DISABLED'


class M2tsAbsentInputAudioBehavior(Enum):
    DROP = 'DROP'
    ENCODE_SILENCE = 'ENCODE_SILENCE'


class M2tsArib(Enum):
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'


class M2tsAribCaptionsPidControl(Enum):
    AUTO = 'AUTO'
    USE_CONFIGURED = 'USE_CONFIGURED'


class M2tsAudioBufferModel(Enum):
    ATSC = 'ATSC'
    DVB = 'DVB'


class M2tsAudioInterval(Enum):
    VIDEO_AND_FIXED_INTERVALS = 'VIDEO_AND_FIXED_INTERVALS'
    VIDEO_INTERVAL = 'VIDEO_INTERVAL'


class M2tsAudioStreamType(Enum):
    ATSC = 'ATSC'
    DVB = 'DVB'


class M2tsBufferModel(Enum):
    MULTIPLEX = 'MULTIPLEX'
    NONE = 'NONE'


class M2tsCcDescriptor(Enum):
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'


class M2tsEbifControl(Enum):
    NONE = 'NONE'
    PASSTHROUGH = 'PASSTHROUGH'


class M2tsEbpPlacement(Enum):
    VIDEO_AND_AUDIO_PIDS = 'VIDEO_AND_AUDIO_PIDS'
    VIDEO_PID = 'VIDEO_PID'


class M2tsEsRateInPes(Enum):
    EXCLUDE = 'EXCLUDE'
    INCLUDE = 'INCLUDE'


class M2tsKlv(Enum):
    NONE = 'NONE'
    PASSTHROUGH = 'PASSTHROUGH'


class M2tsNielsenId3Behavior(Enum):
    NO_PASSTHROUGH = 'NO_PASSTHROUGH'
    PASSTHROUGH = 'PASSTHROUGH'


class M2tsPcrControl(Enum):
    CONFIGURED_PCR_PERIOD = 'CONFIGURED_PCR_PERIOD'
    PCR_EVERY_PES_PACKET = 'PCR_EVERY_PES_PACKET'


class M2tsRateMode(Enum):
    CBR = 'CBR'
    VBR = 'VBR'


class M2tsScte35Control(Enum):
    NONE = 'NONE'
    PASSTHROUGH = 'PASSTHROUGH'


class M2tsSegmentationMarkers(Enum):
    EBP = 'EBP'
    EBP_LEGACY = 'EBP_LEGACY'
    NONE = 'NONE'
    PSI_SEGSTART = 'PSI_SEGSTART'
    RAI_ADAPT = 'RAI_ADAPT'
    RAI_SEGSTART = 'RAI_SEGSTART'


class M2tsSegmentationStyle(Enum):
    MAINTAIN_CADENCE = 'MAINTAIN_CADENCE'
    RESET_CADENCE = 'RESET_CADENCE'


class M2tsTimedMetadataBehavior(Enum):
    NO_PASSTHROUGH = 'NO_PASSTHROUGH'
    PASSTHROUGH = 'PASSTHROUGH'


class M3u8NielsenId3Behavior(Enum):
    NO_PASSTHROUGH = 'NO_PASSTHROUGH'
    PASSTHROUGH = 'PASSTHROUGH'


class M3u8PcrControl(Enum):
    CONFIGURED_PCR_PERIOD = 'CONFIGURED_PCR_PERIOD'
    PCR_EVERY_PES_PACKET = 'PCR_EVERY_PES_PACKET'


class M3u8Scte35Behavior(Enum):
    NO_PASSTHROUGH = 'NO_PASSTHROUGH'
    PASSTHROUGH = 'PASSTHROUGH'


class M3u8TimedMetadataBehavior(Enum):
    NO_PASSTHROUGH = 'NO_PASSTHROUGH'
    PASSTHROUGH = 'PASSTHROUGH'


class MaintenanceDay(Enum):
    MONDAY = 'MONDAY'
    TUESDAY = 'TUESDAY'
    WEDNESDAY = 'WEDNESDAY'
    THURSDAY = 'THURSDAY'
    FRIDAY = 'FRIDAY'
    SATURDAY = 'SATURDAY'
    SUNDAY = 'SUNDAY'


class MaxResults(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000) = Field(
        ..., description='Placeholder documentation for MaxResults'
    )


class MediaPackageOutputSettings(BaseModel):
    pass


class MotionGraphicsDeactivateScheduleActionSettings(BaseModel):
    pass


class MotionGraphicsInsertion(Enum):
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'


class MotionGraphicsSettings(BaseModel):
    HtmlMotionGraphicsSettings_1: Optional[HtmlMotionGraphicsSettings] = Field(
        None, alias='HtmlMotionGraphicsSettings'
    )


class Mp2CodingMode(Enum):
    CODING_MODE_1_0 = 'CODING_MODE_1_0'
    CODING_MODE_2_0 = 'CODING_MODE_2_0'


class Mpeg2AdaptiveQuantization(Enum):
    AUTO = 'AUTO'
    HIGH = 'HIGH'
    LOW = 'LOW'
    MEDIUM = 'MEDIUM'
    OFF = 'OFF'


class Mpeg2ColorMetadata(Enum):
    IGNORE = 'IGNORE'
    INSERT = 'INSERT'


class Mpeg2ColorSpace(Enum):
    AUTO = 'AUTO'
    PASSTHROUGH = 'PASSTHROUGH'


class Mpeg2DisplayRatio(Enum):
    DISPLAYRATIO16X9 = 'DISPLAYRATIO16X9'
    DISPLAYRATIO4X3 = 'DISPLAYRATIO4X3'


class Mpeg2GopSizeUnits(Enum):
    FRAMES = 'FRAMES'
    SECONDS = 'SECONDS'


class Mpeg2ScanType(Enum):
    INTERLACED = 'INTERLACED'
    PROGRESSIVE = 'PROGRESSIVE'


class Mpeg2SubGopLength(Enum):
    DYNAMIC = 'DYNAMIC'
    FIXED = 'FIXED'


class Mpeg2TimecodeInsertionBehavior(Enum):
    DISABLED = 'DISABLED'
    GOP_TIMECODE = 'GOP_TIMECODE'


class MsSmoothH265PackagingType(Enum):
    HEV1 = 'HEV1'
    HVC1 = 'HVC1'


class MultiplexGroupSettings(BaseModel):
    pass


class MultiplexState(Enum):
    CREATING = 'CREATING'
    CREATE_FAILED = 'CREATE_FAILED'
    IDLE = 'IDLE'
    STARTING = 'STARTING'
    RUNNING = 'RUNNING'
    RECOVERING = 'RECOVERING'
    STOPPING = 'STOPPING'
    DELETING = 'DELETING'
    DELETED = 'DELETED'


class NetworkInputServerValidation(Enum):
    CHECK_CRYPTOGRAPHY_AND_VALIDATE_NAME = 'CHECK_CRYPTOGRAPHY_AND_VALIDATE_NAME'
    CHECK_CRYPTOGRAPHY_ONLY = 'CHECK_CRYPTOGRAPHY_ONLY'


class NielsenPcmToId3TaggingState(Enum):
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'


class NielsenWatermarkTimezones(Enum):
    AMERICA_PUERTO_RICO = 'AMERICA_PUERTO_RICO'
    US_ALASKA = 'US_ALASKA'
    US_ARIZONA = 'US_ARIZONA'
    US_CENTRAL = 'US_CENTRAL'
    US_EASTERN = 'US_EASTERN'
    US_HAWAII = 'US_HAWAII'
    US_MOUNTAIN = 'US_MOUNTAIN'
    US_PACIFIC = 'US_PACIFIC'
    US_SAMOA = 'US_SAMOA'
    UTC = 'UTC'


class NielsenWatermarksCbetStepaside(Enum):
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'


class NielsenWatermarksDistributionTypes(Enum):
    FINAL_DISTRIBUTOR = 'FINAL_DISTRIBUTOR'
    PROGRAM_CONTENT = 'PROGRAM_CONTENT'


class NotFoundException(RootModel[Any]):
    root: Any


class OfferingDurationUnits(Enum):
    MONTHS = 'MONTHS'


class OfferingType(Enum):
    NO_UPFRONT = 'NO_UPFRONT'


class PassThroughSettings(BaseModel):
    pass


class PipelineId(Enum):
    PIPELINE_0 = 'PIPELINE_0'
    PIPELINE_1 = 'PIPELINE_1'


class PipelinePauseStateSettings(BaseModel):
    PipelineId_1: PipelineId = Field(..., alias='PipelineId')


class PreferredChannelPipeline(Enum):
    CURRENTLY_ACTIVE = 'CURRENTLY_ACTIVE'
    PIPELINE_0 = 'PIPELINE_0'
    PIPELINE_1 = 'PIPELINE_1'


class RawSettings(BaseModel):
    pass


class RebootInputDeviceForce(Enum):
    NO = 'NO'
    YES = 'YES'


class RebootInputDeviceRequest(BaseModel):
    Force: Optional[RebootInputDeviceForce] = None


class RebootInputDeviceResponse(BaseModel):
    pass


class Rec601Settings(BaseModel):
    pass


class Rec709Settings(BaseModel):
    pass


class RejectInputDeviceTransferRequest(BaseModel):
    pass


class RejectInputDeviceTransferResponse(BaseModel):
    pass


class ReservationAutomaticRenewal(Enum):
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'
    UNAVAILABLE = 'UNAVAILABLE'


class ReservationCodec(Enum):
    MPEG2 = 'MPEG2'
    AVC = 'AVC'
    HEVC = 'HEVC'
    AUDIO = 'AUDIO'
    LINK = 'LINK'


class ReservationMaximumBitrate(Enum):
    MAX_10_MBPS = 'MAX_10_MBPS'
    MAX_20_MBPS = 'MAX_20_MBPS'
    MAX_50_MBPS = 'MAX_50_MBPS'


class ReservationMaximumFramerate(Enum):
    MAX_30_FPS = 'MAX_30_FPS'
    MAX_60_FPS = 'MAX_60_FPS'


class ReservationResolution(Enum):
    SD = 'SD'
    HD = 'HD'
    FHD = 'FHD'
    UHD = 'UHD'


class ReservationResourceType(Enum):
    INPUT = 'INPUT'
    OUTPUT = 'OUTPUT'
    MULTIPLEX = 'MULTIPLEX'
    CHANNEL = 'CHANNEL'


class ReservationSpecialFeature(Enum):
    ADVANCED_AUDIO = 'ADVANCED_AUDIO'
    AUDIO_NORMALIZATION = 'AUDIO_NORMALIZATION'
    MGHD = 'MGHD'
    MGUHD = 'MGUHD'


class ReservationState(Enum):
    ACTIVE = 'ACTIVE'
    EXPIRED = 'EXPIRED'
    CANCELED = 'CANCELED'
    DELETED = 'DELETED'


class ReservationVideoQuality(Enum):
    STANDARD = 'STANDARD'
    ENHANCED = 'ENHANCED'
    PREMIUM = 'PREMIUM'


class RtmpAdMarkers(Enum):
    ON_CUE_POINT_SCTE35 = 'ON_CUE_POINT_SCTE35'


class RtmpCacheFullBehavior(Enum):
    DISCONNECT_IMMEDIATELY = 'DISCONNECT_IMMEDIATELY'
    WAIT_FOR_SERVER = 'WAIT_FOR_SERVER'


class RtmpCaptionData(Enum):
    ALL = 'ALL'
    FIELD1_608 = 'FIELD1_608'
    FIELD1_AND_FIELD2_608 = 'FIELD1_AND_FIELD2_608'


class RtmpCaptionInfoDestinationSettings(BaseModel):
    pass


class RtmpOutputCertificateMode(Enum):
    SELF_SIGNED = 'SELF_SIGNED'
    VERIFY_AUTHENTICITY = 'VERIFY_AUTHENTICITY'


class S3CannedAcl(Enum):
    AUTHENTICATED_READ = 'AUTHENTICATED_READ'
    BUCKET_OWNER_FULL_CONTROL = 'BUCKET_OWNER_FULL_CONTROL'
    BUCKET_OWNER_READ = 'BUCKET_OWNER_READ'
    PUBLIC_READ = 'PUBLIC_READ'


class Scte20Convert608To708(Enum):
    DISABLED = 'DISABLED'
    UPCONVERT = 'UPCONVERT'


class Scte20PlusEmbeddedDestinationSettings(BaseModel):
    pass


class Scte27DestinationSettings(BaseModel):
    pass


class Scte27OcrLanguage(Enum):
    DEU = 'DEU'
    ENG = 'ENG'
    FRA = 'FRA'
    NLD = 'NLD'
    POR = 'POR'
    SPA = 'SPA'


class Scte35AposNoRegionalBlackoutBehavior(Enum):
    FOLLOW = 'FOLLOW'
    IGNORE = 'IGNORE'


class Scte35AposWebDeliveryAllowedBehavior(Enum):
    FOLLOW = 'FOLLOW'
    IGNORE = 'IGNORE'


class Scte35ArchiveAllowedFlag(Enum):
    ARCHIVE_NOT_ALLOWED = 'ARCHIVE_NOT_ALLOWED'
    ARCHIVE_ALLOWED = 'ARCHIVE_ALLOWED'


class Scte35DeviceRestrictions(Enum):
    NONE = 'NONE'
    RESTRICT_GROUP0 = 'RESTRICT_GROUP0'
    RESTRICT_GROUP1 = 'RESTRICT_GROUP1'
    RESTRICT_GROUP2 = 'RESTRICT_GROUP2'


class Scte35InputMode(Enum):
    FIXED = 'FIXED'
    FOLLOW_ACTIVE = 'FOLLOW_ACTIVE'


class Scte35NoRegionalBlackoutFlag(Enum):
    REGIONAL_BLACKOUT = 'REGIONAL_BLACKOUT'
    NO_REGIONAL_BLACKOUT = 'NO_REGIONAL_BLACKOUT'


class Scte35SegmentationCancelIndicator(Enum):
    SEGMENTATION_EVENT_NOT_CANCELED = 'SEGMENTATION_EVENT_NOT_CANCELED'
    SEGMENTATION_EVENT_CANCELED = 'SEGMENTATION_EVENT_CANCELED'


class Scte35SpliceInsertNoRegionalBlackoutBehavior(Enum):
    FOLLOW = 'FOLLOW'
    IGNORE = 'IGNORE'


class Scte35SpliceInsertWebDeliveryAllowedBehavior(Enum):
    FOLLOW = 'FOLLOW'
    IGNORE = 'IGNORE'


class Scte35WebDeliveryAllowedFlag(Enum):
    WEB_DELIVERY_NOT_ALLOWED = 'WEB_DELIVERY_NOT_ALLOWED'
    WEB_DELIVERY_ALLOWED = 'WEB_DELIVERY_ALLOWED'


class SmoothGroupAudioOnlyTimecodeControl(Enum):
    PASSTHROUGH = 'PASSTHROUGH'
    USE_CONFIGURED_CLOCK = 'USE_CONFIGURED_CLOCK'


class SmoothGroupCertificateMode(Enum):
    SELF_SIGNED = 'SELF_SIGNED'
    VERIFY_AUTHENTICITY = 'VERIFY_AUTHENTICITY'


class SmoothGroupEventIdMode(Enum):
    NO_EVENT_ID = 'NO_EVENT_ID'
    USE_CONFIGURED = 'USE_CONFIGURED'
    USE_TIMESTAMP = 'USE_TIMESTAMP'


class SmoothGroupEventStopBehavior(Enum):
    NONE = 'NONE'
    SEND_EOS = 'SEND_EOS'


class SmoothGroupSegmentationMode(Enum):
    USE_INPUT_SEGMENTATION = 'USE_INPUT_SEGMENTATION'
    USE_SEGMENT_DURATION = 'USE_SEGMENT_DURATION'


class SmoothGroupSparseTrackType(Enum):
    NONE = 'NONE'
    SCTE_35 = 'SCTE_35'
    SCTE_35_WITHOUT_SEGMENTATION = 'SCTE_35_WITHOUT_SEGMENTATION'


class SmoothGroupStreamManifestBehavior(Enum):
    DO_NOT_SEND = 'DO_NOT_SEND'
    SEND = 'SEND'


class SmoothGroupTimestampOffsetMode(Enum):
    USE_CONFIGURED_OFFSET = 'USE_CONFIGURED_OFFSET'
    USE_EVENT_START_DATE = 'USE_EVENT_START_DATE'


class Smpte2038DataPreference(Enum):
    IGNORE = 'IGNORE'
    PREFER = 'PREFER'


class SmpteTtDestinationSettings(BaseModel):
    pass


class StartChannelRequest(BaseModel):
    pass


class StartInputDeviceMaintenanceWindowRequest(BaseModel):
    pass


class StartInputDeviceMaintenanceWindowResponse(BaseModel):
    pass


class StartMultiplexRequest(BaseModel):
    pass


class StopChannelRequest(BaseModel):
    pass


class StopMultiplexRequest(BaseModel):
    pass


class TeletextDestinationSettings(BaseModel):
    pass


class TemporalFilterPostFilterSharpening(Enum):
    AUTO = 'AUTO'
    DISABLED = 'DISABLED'
    ENABLED = 'ENABLED'


class TemporalFilterStrength(Enum):
    AUTO = 'AUTO'
    STRENGTH_1 = 'STRENGTH_1'
    STRENGTH_2 = 'STRENGTH_2'
    STRENGTH_3 = 'STRENGTH_3'
    STRENGTH_4 = 'STRENGTH_4'
    STRENGTH_5 = 'STRENGTH_5'
    STRENGTH_6 = 'STRENGTH_6'
    STRENGTH_7 = 'STRENGTH_7'
    STRENGTH_8 = 'STRENGTH_8'
    STRENGTH_9 = 'STRENGTH_9'
    STRENGTH_10 = 'STRENGTH_10'
    STRENGTH_11 = 'STRENGTH_11'
    STRENGTH_12 = 'STRENGTH_12'
    STRENGTH_13 = 'STRENGTH_13'
    STRENGTH_14 = 'STRENGTH_14'
    STRENGTH_15 = 'STRENGTH_15'
    STRENGTH_16 = 'STRENGTH_16'


class TimecodeBurninFontSize(Enum):
    EXTRA_SMALL_10 = 'EXTRA_SMALL_10'
    LARGE_48 = 'LARGE_48'
    MEDIUM_32 = 'MEDIUM_32'
    SMALL_16 = 'SMALL_16'


class TimecodeBurninPosition(Enum):
    BOTTOM_CENTER = 'BOTTOM_CENTER'
    BOTTOM_LEFT = 'BOTTOM_LEFT'
    BOTTOM_RIGHT = 'BOTTOM_RIGHT'
    MIDDLE_CENTER = 'MIDDLE_CENTER'
    MIDDLE_LEFT = 'MIDDLE_LEFT'
    MIDDLE_RIGHT = 'MIDDLE_RIGHT'
    TOP_CENTER = 'TOP_CENTER'
    TOP_LEFT = 'TOP_LEFT'
    TOP_RIGHT = 'TOP_RIGHT'


class TimecodeConfigSource(Enum):
    EMBEDDED = 'EMBEDDED'
    SYSTEMCLOCK = 'SYSTEMCLOCK'
    ZEROBASED = 'ZEROBASED'


class TooManyRequestsException(RootModel[Any]):
    root: Any


class TransferInputDeviceResponse(BaseModel):
    pass


class TtmlDestinationStyleControl(Enum):
    PASSTHROUGH = 'PASSTHROUGH'
    USE_CONFIGURED = 'USE_CONFIGURED'


class UdpTimedMetadataId3Frame(Enum):
    NONE = 'NONE'
    PRIV = 'PRIV'
    TDRL = 'TDRL'


class UnprocessableEntityException(RootModel[Any]):
    root: Any


class VideoDescriptionRespondToAfd(Enum):
    NONE = 'NONE'
    PASSTHROUGH = 'PASSTHROUGH'
    RESPOND = 'RESPOND'


class VideoDescriptionScalingBehavior(Enum):
    DEFAULT = 'DEFAULT'
    STRETCH_TO_OUTPUT = 'STRETCH_TO_OUTPUT'


class VideoSelectorColorSpace(Enum):
    FOLLOW = 'FOLLOW'
    HDR10 = 'HDR10'
    HLG_2020 = 'HLG_2020'
    REC_601 = 'REC_601'
    REC_709 = 'REC_709'


class VideoSelectorColorSpaceUsage(Enum):
    FALLBACK = 'FALLBACK'
    FORCE = 'FORCE'


class WavCodingMode(Enum):
    CODING_MODE_1_0 = 'CODING_MODE_1_0'
    CODING_MODE_2_0 = 'CODING_MODE_2_0'
    CODING_MODE_4_0 = 'CODING_MODE_4_0'
    CODING_MODE_8_0 = 'CODING_MODE_8_0'


class WebvttDestinationStyleControl(Enum):
    NO_STYLE_DATA = 'NO_STYLE_DATA'
    PASSTHROUGH = 'PASSTHROUGH'


class FieldDouble(RootModel[float]):
    root: float = Field(..., description='Placeholder documentation for __double')


class FieldDoubleMin0(RootModel[float]):
    root: float = Field(..., description='Placeholder documentation for __doubleMin0')


class FieldDoubleMin0Max1(RootModel[float]):
    root: float = Field(
        ..., description='Placeholder documentation for __doubleMin0Max1'
    )


class FieldDoubleMin0Max100(RootModel[float]):
    root: float = Field(
        ..., description='Placeholder documentation for __doubleMin0Max100'
    )


class FieldDoubleMin0Max5000(RootModel[float]):
    root: float = Field(
        ..., description='Placeholder documentation for __doubleMin0Max5000'
    )


class FieldDoubleMin1(RootModel[float]):
    root: float = Field(..., description='Placeholder documentation for __doubleMin1')


class FieldDoubleMin1Max65535(RootModel[float]):
    root: float = Field(
        ..., description='Placeholder documentation for __doubleMin1Max65535'
    )


class FieldDoubleMinNegative59Max0(RootModel[float]):
    root: float = Field(
        ..., description='Placeholder documentation for __doubleMinNegative59Max0'
    )


class FieldInteger(RootModel[int]):
    root: int = Field(..., description='Placeholder documentation for __integer')


class FieldIntegerMin0(RootModel[conint(ge=0)]):
    root: conint(ge=0) = Field(
        ..., description='Placeholder documentation for __integerMin0'
    )


class FieldIntegerMin0Max10(RootModel[conint(ge=0, le=10)]):
    root: conint(ge=0, le=10) = Field(
        ..., description='Placeholder documentation for __integerMin0Max10'
    )


class FieldIntegerMin0Max100(RootModel[conint(ge=0, le=100)]):
    root: conint(ge=0, le=100) = Field(
        ..., description='Placeholder documentation for __integerMin0Max100'
    )


class FieldIntegerMin0Max1000(RootModel[conint(ge=0, le=1000)]):
    root: conint(ge=0, le=1000) = Field(
        ..., description='Placeholder documentation for __integerMin0Max1000'
    )


class FieldIntegerMin0Max10000(RootModel[conint(ge=0, le=10000)]):
    root: conint(ge=0, le=10000) = Field(
        ..., description='Placeholder documentation for __integerMin0Max10000'
    )


class FieldIntegerMin0Max1000000(RootModel[conint(ge=0, le=1000000)]):
    root: conint(ge=0, le=1000000) = Field(
        ..., description='Placeholder documentation for __integerMin0Max1000000'
    )


class FieldIntegerMin0Max100000000(RootModel[conint(ge=0, le=100000000)]):
    root: conint(ge=0, le=100000000) = Field(
        ..., description='Placeholder documentation for __integerMin0Max100000000'
    )


class FieldIntegerMin0Max128(RootModel[conint(ge=0, le=128)]):
    root: conint(ge=0, le=128) = Field(
        ..., description='Placeholder documentation for __integerMin0Max128'
    )


class FieldIntegerMin0Max15(RootModel[conint(ge=0, le=15)]):
    root: conint(ge=0, le=15) = Field(
        ..., description='Placeholder documentation for __integerMin0Max15'
    )


class FieldIntegerMin0Max255(RootModel[conint(ge=0, le=255)]):
    root: conint(ge=0, le=255) = Field(
        ..., description='Placeholder documentation for __integerMin0Max255'
    )


class FieldIntegerMin0Max30(RootModel[conint(ge=0, le=30)]):
    root: conint(ge=0, le=30) = Field(
        ..., description='Placeholder documentation for __integerMin0Max30'
    )


class FieldIntegerMin0Max32768(RootModel[conint(ge=0, le=32768)]):
    root: conint(ge=0, le=32768) = Field(
        ..., description='Placeholder documentation for __integerMin0Max32768'
    )


class FieldIntegerMin0Max3600(RootModel[conint(ge=0, le=3600)]):
    root: conint(ge=0, le=3600) = Field(
        ..., description='Placeholder documentation for __integerMin0Max3600'
    )


class FieldIntegerMin0Max500(RootModel[conint(ge=0, le=500)]):
    root: conint(ge=0, le=500) = Field(
        ..., description='Placeholder documentation for __integerMin0Max500'
    )


class FieldIntegerMin0Max600(RootModel[conint(ge=0, le=600)]):
    root: conint(ge=0, le=600) = Field(
        ..., description='Placeholder documentation for __integerMin0Max600'
    )


class FieldIntegerMin0Max65535(RootModel[conint(ge=0, le=65535)]):
    root: conint(ge=0, le=65535) = Field(
        ..., description='Placeholder documentation for __integerMin0Max65535'
    )


class FieldIntegerMin0Max65536(RootModel[conint(ge=0, le=65536)]):
    root: conint(ge=0, le=65536) = Field(
        ..., description='Placeholder documentation for __integerMin0Max65536'
    )


class FieldIntegerMin0Max7(RootModel[conint(ge=0, le=7)]):
    root: conint(ge=0, le=7) = Field(
        ..., description='Placeholder documentation for __integerMin0Max7'
    )


class FieldIntegerMin0Max8191(RootModel[conint(ge=0, le=8191)]):
    root: conint(ge=0, le=8191) = Field(
        ..., description='Placeholder documentation for __integerMin0Max8191'
    )


class FieldIntegerMin1(RootModel[conint(ge=1)]):
    root: conint(ge=1) = Field(
        ..., description='Placeholder documentation for __integerMin1'
    )


class FieldIntegerMin100(RootModel[conint(ge=100)]):
    root: conint(ge=100) = Field(
        ..., description='Placeholder documentation for __integerMin100'
    )


class FieldIntegerMin1000(RootModel[conint(ge=1000)]):
    root: conint(ge=1000) = Field(
        ..., description='Placeholder documentation for __integerMin1000'
    )


class FieldIntegerMin1000000Max100000000(RootModel[conint(ge=1000000, le=100000000)]):
    root: conint(ge=1000000, le=100000000) = Field(
        ..., description='Placeholder documentation for __integerMin1000000Max100000000'
    )


class FieldIntegerMin100000Max100000000(RootModel[conint(ge=100000, le=100000000)]):
    root: conint(ge=100000, le=100000000) = Field(
        ..., description='Placeholder documentation for __integerMin100000Max100000000'
    )


class FieldIntegerMin100000Max40000000(RootModel[conint(ge=100000, le=40000000)]):
    root: conint(ge=100000, le=40000000) = Field(
        ..., description='Placeholder documentation for __integerMin100000Max40000000'
    )


class FieldIntegerMin100000Max80000000(RootModel[conint(ge=100000, le=80000000)]):
    root: conint(ge=100000, le=80000000) = Field(
        ..., description='Placeholder documentation for __integerMin100000Max80000000'
    )


class FieldIntegerMin1000Max30000(RootModel[conint(ge=1000, le=30000)]):
    root: conint(ge=1000, le=30000) = Field(
        ..., description='Placeholder documentation for __integerMin1000Max30000'
    )


class FieldIntegerMin1Max10(RootModel[conint(ge=1, le=10)]):
    root: conint(ge=1, le=10) = Field(
        ..., description='Placeholder documentation for __integerMin1Max10'
    )


class FieldIntegerMin1Max1000000(RootModel[conint(ge=1, le=1000000)]):
    root: conint(ge=1, le=1000000) = Field(
        ..., description='Placeholder documentation for __integerMin1Max1000000'
    )


class FieldIntegerMin1Max16(RootModel[conint(ge=1, le=16)]):
    root: conint(ge=1, le=16) = Field(
        ..., description='Placeholder documentation for __integerMin1Max16'
    )


class FieldIntegerMin1Max20(RootModel[conint(ge=1, le=20)]):
    root: conint(ge=1, le=20) = Field(
        ..., description='Placeholder documentation for __integerMin1Max20'
    )


class FieldIntegerMin1Max3003(RootModel[conint(ge=1, le=3003)]):
    root: conint(ge=1, le=3003) = Field(
        ..., description='Placeholder documentation for __integerMin1Max3003'
    )


class FieldIntegerMin1Max31(RootModel[conint(ge=1, le=31)]):
    root: conint(ge=1, le=31) = Field(
        ..., description='Placeholder documentation for __integerMin1Max31'
    )


class FieldIntegerMin1Max32(RootModel[conint(ge=1, le=32)]):
    root: conint(ge=1, le=32) = Field(
        ..., description='Placeholder documentation for __integerMin1Max32'
    )


class FieldIntegerMin1Max3600000(RootModel[conint(ge=1, le=3600000)]):
    root: conint(ge=1, le=3600000) = Field(
        ..., description='Placeholder documentation for __integerMin1Max3600000'
    )


class FieldIntegerMin1Max4(RootModel[conint(ge=1, le=4)]):
    root: conint(ge=1, le=4) = Field(
        ..., description='Placeholder documentation for __integerMin1Max4'
    )


class FieldIntegerMin1Max5(RootModel[conint(ge=1, le=5)]):
    root: conint(ge=1, le=5) = Field(
        ..., description='Placeholder documentation for __integerMin1Max5'
    )


class FieldIntegerMin1Max6(RootModel[conint(ge=1, le=6)]):
    root: conint(ge=1, le=6) = Field(
        ..., description='Placeholder documentation for __integerMin1Max6'
    )


class FieldIntegerMin1Max8(RootModel[conint(ge=1, le=8)]):
    root: conint(ge=1, le=8) = Field(
        ..., description='Placeholder documentation for __integerMin1Max8'
    )


class FieldIntegerMin25Max10000(RootModel[conint(ge=25, le=10000)]):
    root: conint(ge=25, le=10000) = Field(
        ..., description='Placeholder documentation for __integerMin25Max10000'
    )


class FieldIntegerMin25Max2000(RootModel[conint(ge=25, le=2000)]):
    root: conint(ge=25, le=2000) = Field(
        ..., description='Placeholder documentation for __integerMin25Max2000'
    )


class FieldIntegerMin3(RootModel[conint(ge=3)]):
    root: conint(ge=3) = Field(
        ..., description='Placeholder documentation for __integerMin3'
    )


class FieldIntegerMin30(RootModel[conint(ge=30)]):
    root: conint(ge=30) = Field(
        ..., description='Placeholder documentation for __integerMin30'
    )


class FieldIntegerMin32Max8191(RootModel[conint(ge=32, le=8191)]):
    root: conint(ge=32, le=8191) = Field(
        ..., description='Placeholder documentation for __integerMin32Max8191'
    )


class FieldIntegerMin4Max20(RootModel[conint(ge=4, le=20)]):
    root: conint(ge=4, le=20) = Field(
        ..., description='Placeholder documentation for __integerMin4Max20'
    )


class FieldIntegerMin800Max3000(RootModel[conint(ge=800, le=3000)]):
    root: conint(ge=800, le=3000) = Field(
        ..., description='Placeholder documentation for __integerMin800Max3000'
    )


class FieldIntegerMin96Max600(RootModel[conint(ge=96, le=600)]):
    root: conint(ge=96, le=600) = Field(
        ..., description='Placeholder documentation for __integerMin96Max600'
    )


class FieldIntegerMinNegative1000Max1000(RootModel[conint(ge=-1000, le=1000)]):
    root: conint(ge=-1000, le=1000) = Field(
        ..., description='Placeholder documentation for __integerMinNegative1000Max1000'
    )


class FieldIntegerMinNegative5Max5(RootModel[conint(ge=-5, le=5)]):
    root: conint(ge=-5, le=5) = Field(
        ..., description='Placeholder documentation for __integerMinNegative5Max5'
    )


class FieldIntegerMinNegative60Max6(RootModel[conint(ge=-60, le=6)]):
    root: conint(ge=-60, le=6) = Field(
        ..., description='Placeholder documentation for __integerMinNegative60Max6'
    )


class FieldIntegerMinNegative60Max60(RootModel[conint(ge=-60, le=60)]):
    root: conint(ge=-60, le=60) = Field(
        ..., description='Placeholder documentation for __integerMinNegative60Max60'
    )


class FieldListOfHlsAdMarkers(RootModel[List[HlsAdMarkers]]):
    root: List[HlsAdMarkers] = Field(
        ..., description='Placeholder documentation for __listOfHlsAdMarkers'
    )


class FieldListOfPipelinePauseStateSettings(
    RootModel[List[PipelinePauseStateSettings]]
):
    root: List[PipelinePauseStateSettings] = Field(
        ...,
        description='Placeholder documentation for __listOfPipelinePauseStateSettings',
    )


class FieldListOfRtmpAdMarkers(RootModel[List[RtmpAdMarkers]]):
    root: List[RtmpAdMarkers] = Field(
        ..., description='Placeholder documentation for __listOfRtmpAdMarkers'
    )


class FieldListOfInteger(RootModel[List[FieldInteger]]):
    root: List[FieldInteger] = Field(
        ..., description='Placeholder documentation for __listOf__integer'
    )


class FieldLong(RootModel[int]):
    root: int = Field(..., description='Placeholder documentation for __long')


class FieldLongMin0Max1099511627775(RootModel[conint(ge=0, le=1099511627775)]):
    root: conint(ge=0, le=1099511627775) = Field(
        ..., description='Placeholder documentation for __longMin0Max1099511627775'
    )


class FieldLongMin0Max4294967295(RootModel[conint(ge=0, le=4294967295)]):
    root: conint(ge=0, le=4294967295) = Field(
        ..., description='Placeholder documentation for __longMin0Max4294967295'
    )


class FieldLongMin0Max8589934591(RootModel[conint(ge=0, le=8589934591)]):
    root: conint(ge=0, le=8589934591) = Field(
        ..., description='Placeholder documentation for __longMin0Max8589934591'
    )


class FieldLongMin0Max86400000(RootModel[conint(ge=0, le=86400000)]):
    root: conint(ge=0, le=86400000) = Field(
        ..., description='Placeholder documentation for __longMin0Max86400000'
    )


class FieldString(RootModel[str]):
    root: str = Field(..., description='Placeholder documentation for __string')


class FieldStringMax1000(RootModel[constr(max_length=1000)]):
    root: constr(max_length=1000) = Field(
        ..., description='Placeholder documentation for __stringMax1000'
    )


class FieldStringMax2048(RootModel[constr(max_length=2048)]):
    root: constr(max_length=2048) = Field(
        ..., description='Placeholder documentation for __stringMax2048'
    )


class FieldStringMax255(RootModel[constr(max_length=255)]):
    root: constr(max_length=255) = Field(
        ..., description='Placeholder documentation for __stringMax255'
    )


class FieldStringMax256(RootModel[constr(max_length=256)]):
    root: constr(max_length=256) = Field(
        ..., description='Placeholder documentation for __stringMax256'
    )


class FieldStringMax32(RootModel[constr(max_length=32)]):
    root: constr(max_length=32) = Field(
        ..., description='Placeholder documentation for __stringMax32'
    )


class FieldStringMin1(RootModel[constr(min_length=1)]):
    root: constr(min_length=1) = Field(
        ..., description='Placeholder documentation for __stringMin1'
    )


class FieldStringMin1Max255(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255) = Field(
        ..., description='Placeholder documentation for __stringMin1Max255'
    )


class FieldStringMin1Max256(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256) = Field(
        ..., description='Placeholder documentation for __stringMin1Max256'
    )


class FieldStringMin1Max35(RootModel[constr(min_length=1, max_length=35)]):
    root: constr(min_length=1, max_length=35) = Field(
        ..., description='Placeholder documentation for __stringMin1Max35'
    )


class FieldStringMin1Max7(RootModel[constr(min_length=1, max_length=7)]):
    root: constr(min_length=1, max_length=7) = Field(
        ..., description='Placeholder documentation for __stringMin1Max7'
    )


class FieldStringMin2Max2(RootModel[constr(min_length=2, max_length=2)]):
    root: constr(min_length=2, max_length=2) = Field(
        ..., description='Placeholder documentation for __stringMin2Max2'
    )


class FieldStringMin32Max32(RootModel[constr(min_length=32, max_length=32)]):
    root: constr(min_length=32, max_length=32) = Field(
        ..., description='Placeholder documentation for __stringMin32Max32'
    )


class FieldStringMin34Max34(RootModel[constr(min_length=34, max_length=34)]):
    root: constr(min_length=34, max_length=34) = Field(
        ..., description='Placeholder documentation for __stringMin34Max34'
    )


class FieldStringMin3Max3(RootModel[constr(min_length=3, max_length=3)]):
    root: constr(min_length=3, max_length=3) = Field(
        ..., description='Placeholder documentation for __stringMin3Max3'
    )


class FieldStringMin6Max6(RootModel[constr(min_length=6, max_length=6)]):
    root: constr(min_length=6, max_length=6) = Field(
        ..., description='Placeholder documentation for __stringMin6Max6'
    )


class FieldStringPattern010920300(
    RootModel[constr(pattern=r'^([0,1]?[0-9]|2[0-3]):00$')]
):
    root: constr(pattern=r'^([0,1]?[0-9]|2[0-3]):00$') = Field(
        ..., description='Placeholder documentation for __stringPattern010920300'
    )


class FieldTimestamp(RootModel[datetime]):
    root: datetime = Field(..., description='Placeholder documentation for __timestamp')


class ProdBatchDeletePostRequest(BaseModel):
    channelIds: Optional[List[FieldString]] = Field(
        None, description='Placeholder documentation for __listOf__string'
    )
    inputIds: Optional[List[FieldString]] = Field(
        None, description='Placeholder documentation for __listOf__string'
    )
    inputSecurityGroupIds: Optional[List[FieldString]] = Field(
        None, description='Placeholder documentation for __listOf__string'
    )
    multiplexIds: Optional[List[FieldString]] = Field(
        None, description='Placeholder documentation for __listOf__string'
    )


class ProdBatchStartPostRequest(BaseModel):
    channelIds: Optional[List[FieldString]] = Field(
        None, description='Placeholder documentation for __listOf__string'
    )
    multiplexIds: Optional[List[FieldString]] = Field(
        None, description='Placeholder documentation for __listOf__string'
    )


class ProdBatchStopPostRequest(BaseModel):
    channelIds: Optional[List[FieldString]] = Field(
        None, description='Placeholder documentation for __listOf__string'
    )
    multiplexIds: Optional[List[FieldString]] = Field(
        None, description='Placeholder documentation for __listOf__string'
    )


class Maintenance(BaseModel):
    MaintenanceDay_1: Optional[MaintenanceDay] = Field(None, alias='MaintenanceDay')
    MaintenanceStartTime: Optional[FieldStringPattern010920300] = None


class Maintenance1(BaseModel):
    MaintenanceDay_1: Optional[MaintenanceDay] = Field(None, alias='MaintenanceDay')
    MaintenanceScheduledDate: Optional[FieldString] = None
    MaintenanceStartTime: Optional[FieldStringPattern010920300] = None


class ProdClaimDevicePostRequest(BaseModel):
    id: Optional[str] = Field(
        None, description='Placeholder documentation for __string'
    )


class HdDeviceSettings(BaseModel):
    ConfiguredInput: Optional[InputDeviceConfiguredInput] = None
    LatencyMs: Optional[FieldInteger] = None
    MaxBitrate: Optional[FieldInteger] = None


class UhdDeviceSettings(BaseModel):
    ConfiguredInput: Optional[InputDeviceConfiguredInput] = None
    LatencyMs: Optional[FieldInteger] = None
    MaxBitrate: Optional[FieldInteger] = None


class ProdInputDevicesInputDeviceIdPutRequest(BaseModel):
    hdDeviceSettings: Optional[HdDeviceSettings] = Field(
        None, description='Configurable settings for the input device.'
    )
    name: Optional[str] = Field(
        None, description='Placeholder documentation for __string'
    )
    uhdDeviceSettings: Optional[UhdDeviceSettings] = Field(
        None, description='Configurable settings for the input device.'
    )


class Force(Enum):
    NO = 'NO'
    YES = 'YES'


class ProdInputDevicesInputDeviceIdRebootPostRequest(BaseModel):
    force: Optional[Force] = Field(
        None, description='Whether or not to force reboot the input device.'
    )


class Accept(Enum):
    image_jpeg = 'image/jpeg'


class ProdInputDevicesInputDeviceIdTransferPostRequest(BaseModel):
    targetCustomerId: Optional[str] = Field(
        None, description='Placeholder documentation for __string'
    )
    targetRegion: Optional[str] = Field(
        None, description='Placeholder documentation for __string'
    )
    transferMessage: Optional[str] = Field(
        None, description='Placeholder documentation for __string'
    )


class Type(Enum):
    UDP_PUSH = 'UDP_PUSH'
    RTP_PUSH = 'RTP_PUSH'
    RTMP_PUSH = 'RTMP_PUSH'
    RTMP_PULL = 'RTMP_PULL'
    URL_PULL = 'URL_PULL'
    MP4_FILE = 'MP4_FILE'
    MEDIACONNECT = 'MEDIACONNECT'
    INPUT_DEVICE = 'INPUT_DEVICE'
    AWS_CDI = 'AWS_CDI'
    TS_FILE = 'TS_FILE'


class ProdInputsInputIdPartnersPostRequest(BaseModel):
    requestId: Optional[str] = Field(
        None, description='Placeholder documentation for __string'
    )
    tags: Optional[Dict[str, FieldString]] = Field(
        None, description='Placeholder documentation for Tags'
    )


class MultiplexSettings1(BaseModel):
    MaximumVideoBufferDelayMilliseconds: Optional[FieldIntegerMin800Max3000] = None
    TransportStreamBitrate: Optional[FieldIntegerMin1000000Max100000000] = None
    TransportStreamId: Optional[FieldIntegerMin0Max65535] = None
    TransportStreamReservedBitrate: Optional[FieldIntegerMin0Max100000000] = None


class ProdMultiplexesPostRequest(BaseModel):
    availabilityZones: List[FieldString] = Field(
        ..., description='Placeholder documentation for __listOf__string'
    )
    multiplexSettings: MultiplexSettings1 = Field(
        ..., description='Contains configuration for a Multiplex event'
    )
    name: str = Field(..., description='Placeholder documentation for __string')
    requestId: str = Field(..., description='Placeholder documentation for __string')
    tags: Optional[Dict[str, FieldString]] = Field(
        None, description='Placeholder documentation for Tags'
    )


class ProdMultiplexesMultiplexIdPutRequest(BaseModel):
    multiplexSettings: Optional[MultiplexSettings1] = Field(
        None, description='Contains configuration for a Multiplex event'
    )
    name: Optional[str] = Field(
        None, description='Placeholder documentation for __string'
    )


class RenewalSettings(BaseModel):
    AutomaticRenewal: Optional[ReservationAutomaticRenewal] = None
    RenewalCount: Optional[FieldIntegerMin1] = None


class ProdOfferingsOfferingIdPurchasePostRequest(BaseModel):
    count: conint(ge=1) = Field(
        ..., description='Placeholder documentation for __integerMin1'
    )
    name: Optional[str] = Field(
        None, description='Placeholder documentation for __string'
    )
    renewalSettings: Optional[RenewalSettings] = Field(
        None, description='The Renewal settings for Reservations'
    )
    requestId: Optional[str] = Field(
        None, description='Placeholder documentation for __string'
    )
    start: Optional[str] = Field(
        None, description='Placeholder documentation for __string'
    )
    tags: Optional[Dict[str, FieldString]] = Field(
        None, description='Placeholder documentation for Tags'
    )


class ProdReservationsReservationIdPutRequest(BaseModel):
    name: Optional[str] = Field(
        None, description='Placeholder documentation for __string'
    )
    renewalSettings: Optional[RenewalSettings] = Field(
        None, description='The Renewal settings for Reservations'
    )


class ProdTagsResourceArnPostRequest(BaseModel):
    tags: Optional[Dict[str, FieldString]] = Field(
        None, description='Placeholder documentation for Tags'
    )


class TagKeys(RootModel[List[FieldString]]):
    root: List[FieldString] = Field(
        ..., description='Placeholder documentation for __listOf__string'
    )


class AacSettings(BaseModel):
    Bitrate: Optional[FieldDouble] = None
    CodingMode: Optional[AacCodingMode] = None
    InputType: Optional[AacInputType] = None
    Profile: Optional[AacProfile] = None
    RateControlMode: Optional[AacRateControlMode] = None
    RawFormat: Optional[AacRawFormat] = None
    SampleRate: Optional[FieldDouble] = None
    Spec: Optional[AacSpec] = None
    VbrQuality: Optional[AacVbrQuality] = None


class Ac3Settings(BaseModel):
    Bitrate: Optional[FieldDouble] = None
    BitstreamMode: Optional[Ac3BitstreamMode] = None
    CodingMode: Optional[Ac3CodingMode] = None
    Dialnorm: Optional[FieldIntegerMin1Max31] = None
    DrcProfile: Optional[Ac3DrcProfile] = None
    LfeFilter: Optional[Ac3LfeFilter] = None
    MetadataControl: Optional[Ac3MetadataControl] = None


class AncillarySourceSettings(BaseModel):
    SourceAncillaryChannelNumber: Optional[FieldIntegerMin1Max4] = None


class ArchiveS3Settings(BaseModel):
    CannedAcl: Optional[S3CannedAcl] = None


class AudioDolbyEDecode(BaseModel):
    ProgramSelection: DolbyEProgramSelection


class AudioHlsRenditionSelection(BaseModel):
    GroupId: FieldStringMin1
    Name: FieldStringMin1


class AudioLanguageSelection(BaseModel):
    LanguageCode: FieldString
    LanguageSelectionPolicy: Optional[AudioLanguageSelectionPolicy] = None


class AudioNormalizationSettings(BaseModel):
    Algorithm: Optional[AudioNormalizationAlgorithm] = None
    AlgorithmControl: Optional[AudioNormalizationAlgorithmControl] = None
    TargetLkfs: Optional[FieldDoubleMinNegative59Max0] = None


class AudioPidSelection(BaseModel):
    Pid: FieldIntegerMin0Max8191


class AudioSilenceFailoverSettings(BaseModel):
    AudioSelectorName: FieldString
    AudioSilenceThresholdMsec: Optional[FieldIntegerMin1000] = None


class AudioTrack(BaseModel):
    Track: FieldIntegerMin1


class BatchFailedResultModel(BaseModel):
    Arn: Optional[FieldString] = None
    Code: Optional[FieldString] = None
    Id: Optional[FieldString] = None
    Message: Optional[FieldString] = None


class BatchSuccessfulResultModel(BaseModel):
    Arn: Optional[FieldString] = None
    Id: Optional[FieldString] = None
    State: Optional[FieldString] = None


class CaptionLanguageMapping(BaseModel):
    CaptionChannel: FieldIntegerMin1Max4
    LanguageCode: FieldStringMin3Max3
    LanguageDescription: FieldStringMin1


class CaptionRectangle(BaseModel):
    Height: FieldDoubleMin0Max100
    LeftOffset: FieldDoubleMin0Max100
    TopOffset: FieldDoubleMin0Max100
    Width: FieldDoubleMin0Max100


class ChannelEgressEndpoint(BaseModel):
    SourceIp: Optional[FieldString] = None


class ClaimDeviceRequest(BaseModel):
    Id: Optional[FieldString] = None


class DescribeInputDeviceThumbnailResponse(BaseModel):
    Body: Optional[InputDeviceThumbnail] = None


class DvbNitSettings(BaseModel):
    NetworkId: FieldIntegerMin0Max65536
    NetworkName: FieldStringMin1Max256
    RepInterval: Optional[FieldIntegerMin25Max10000] = None


class DvbSdtSettings(BaseModel):
    OutputSdt: Optional[DvbSdtOutputSdt] = None
    RepInterval: Optional[FieldIntegerMin25Max2000] = None
    ServiceName: Optional[FieldStringMin1Max256] = None
    ServiceProviderName: Optional[FieldStringMin1Max256] = None


class DvbSubSourceSettings(BaseModel):
    OcrLanguage: Optional[DvbSubOcrLanguage] = None
    Pid: Optional[FieldIntegerMin1] = None


class DvbTdtSettings(BaseModel):
    RepInterval: Optional[FieldIntegerMin1000Max30000] = None


class Eac3AtmosSettings(BaseModel):
    Bitrate: Optional[FieldDouble] = None
    CodingMode: Optional[Eac3AtmosCodingMode] = None
    Dialnorm: Optional[FieldIntegerMin1Max31] = None
    DrcLine: Optional[Eac3AtmosDrcLine] = None
    DrcRf: Optional[Eac3AtmosDrcRf] = None
    HeightTrim: Optional[FieldDouble] = None
    SurroundTrim: Optional[FieldDouble] = None


class Eac3Settings(BaseModel):
    AttenuationControl: Optional[Eac3AttenuationControl] = None
    Bitrate: Optional[FieldDouble] = None
    BitstreamMode: Optional[Eac3BitstreamMode] = None
    CodingMode: Optional[Eac3CodingMode] = None
    DcFilter: Optional[Eac3DcFilter] = None
    Dialnorm: Optional[FieldIntegerMin1Max31] = None
    DrcLine: Optional[Eac3DrcLine] = None
    DrcRf: Optional[Eac3DrcRf] = None
    LfeControl: Optional[Eac3LfeControl] = None
    LfeFilter: Optional[Eac3LfeFilter] = None
    LoRoCenterMixLevel: Optional[FieldDouble] = None
    LoRoSurroundMixLevel: Optional[FieldDouble] = None
    LtRtCenterMixLevel: Optional[FieldDouble] = None
    LtRtSurroundMixLevel: Optional[FieldDouble] = None
    MetadataControl: Optional[Eac3MetadataControl] = None
    PassthroughControl: Optional[Eac3PassthroughControl] = None
    PhaseControl: Optional[Eac3PhaseControl] = None
    StereoDownmix: Optional[Eac3StereoDownmix] = None
    SurroundExMode: Optional[Eac3SurroundExMode] = None
    SurroundMode: Optional[Eac3SurroundMode] = None


class EbuTtDDestinationSettings(BaseModel):
    CopyrightHolder: Optional[FieldStringMax1000] = None
    FillLineGap: Optional[EbuTtDFillLineGapControl] = None
    FontFamily: Optional[FieldString] = None
    StyleControl: Optional[EbuTtDDestinationStyleControl] = None


class EmbeddedSourceSettings(BaseModel):
    Convert608To708: Optional[EmbeddedConvert608To708] = None
    Scte20Detection: Optional[EmbeddedScte20Detection] = None
    Source608ChannelNumber: Optional[FieldIntegerMin1Max4] = None
    Source608TrackNumber: Optional[FieldIntegerMin1Max5] = None


class Esam(BaseModel):
    AcquisitionPointId: FieldStringMax256
    AdAvailOffset: Optional[FieldIntegerMinNegative1000Max1000] = None
    PasswordParam: Optional[FieldString] = None
    PoisEndpoint: FieldStringMax2048
    Username: Optional[FieldString] = None
    ZoneIdentity: Optional[FieldStringMax256] = None


class FeatureActivations(BaseModel):
    InputPrepareScheduleActions: Optional[
        FeatureActivationsInputPrepareScheduleActions
    ] = None


class FecOutputSettings(BaseModel):
    ColumnDepth: Optional[FieldIntegerMin4Max20] = None
    IncludeFec: Optional[FecOutputIncludeFec] = None
    RowLength: Optional[FieldIntegerMin1Max20] = None


class FixedModeScheduleActionStartSettings(BaseModel):
    Time: FieldString


class Fmp4HlsSettings(BaseModel):
    AudioRenditionSets: Optional[FieldString] = None
    NielsenId3Behavior: Optional[Fmp4NielsenId3Behavior] = None
    TimedMetadataBehavior: Optional[Fmp4TimedMetadataBehavior] = None


class FollowModeScheduleActionStartSettings(BaseModel):
    FollowPoint_1: FollowPoint = Field(..., alias='FollowPoint')
    ReferenceActionName: FieldString


class FrameCaptureOutputSettings(BaseModel):
    NameModifier: Optional[FieldString] = None


class FrameCaptureS3Settings(BaseModel):
    CannedAcl: Optional[S3CannedAcl] = None


class H264ColorSpaceSettings(BaseModel):
    ColorSpacePassthroughSettings_1: Optional[ColorSpacePassthroughSettings] = Field(
        None, alias='ColorSpacePassthroughSettings'
    )
    Rec601Settings_1: Optional[Rec601Settings] = Field(None, alias='Rec601Settings')
    Rec709Settings_1: Optional[Rec709Settings] = Field(None, alias='Rec709Settings')


class Hdr10Settings(BaseModel):
    MaxCll: Optional[FieldIntegerMin0Max32768] = None
    MaxFall: Optional[FieldIntegerMin0Max32768] = None


class HlsAkamaiSettings(BaseModel):
    ConnectionRetryInterval: Optional[FieldIntegerMin0] = None
    FilecacheDuration: Optional[FieldIntegerMin0Max600] = None
    HttpTransferMode: Optional[HlsAkamaiHttpTransferMode] = None
    NumRetries: Optional[FieldIntegerMin0] = None
    RestartDelay: Optional[FieldIntegerMin0Max15] = None
    Salt: Optional[FieldString] = None
    Token: Optional[FieldString] = None


class HlsBasicPutSettings(BaseModel):
    ConnectionRetryInterval: Optional[FieldIntegerMin0] = None
    FilecacheDuration: Optional[FieldIntegerMin0Max600] = None
    NumRetries: Optional[FieldIntegerMin0] = None
    RestartDelay: Optional[FieldIntegerMin0Max15] = None


class HlsId3SegmentTaggingScheduleActionSettings(BaseModel):
    Id3: Optional[FieldString] = None
    Tag: Optional[FieldString] = None


class HlsInputSettings(BaseModel):
    Bandwidth: Optional[FieldIntegerMin0] = None
    BufferSegments: Optional[FieldIntegerMin0] = None
    Retries: Optional[FieldIntegerMin0] = None
    RetryInterval: Optional[FieldIntegerMin0] = None
    Scte35Source: Optional[HlsScte35SourceType] = None


class HlsMediaStoreSettings(BaseModel):
    ConnectionRetryInterval: Optional[FieldIntegerMin0] = None
    FilecacheDuration: Optional[FieldIntegerMin0Max600] = None
    MediaStoreStorageClass: Optional[HlsMediaStoreStorageClass] = None
    NumRetries: Optional[FieldIntegerMin0] = None
    RestartDelay: Optional[FieldIntegerMin0Max15] = None


class HlsS3Settings(BaseModel):
    CannedAcl: Optional[S3CannedAcl] = None


class HlsTimedMetadataScheduleActionSettings(BaseModel):
    Id3: FieldString


class HlsWebdavSettings(BaseModel):
    ConnectionRetryInterval: Optional[FieldIntegerMin0] = None
    FilecacheDuration: Optional[FieldIntegerMin0Max600] = None
    HttpTransferMode: Optional[HlsWebdavHttpTransferMode] = None
    NumRetries: Optional[FieldIntegerMin0] = None
    RestartDelay: Optional[FieldIntegerMin0Max15] = None


class InputChannelLevel(BaseModel):
    Gain: FieldIntegerMinNegative60Max6
    InputChannel: FieldIntegerMin0Max15


class InputDestinationRequest(BaseModel):
    StreamName: Optional[FieldString] = None


class InputDestinationVpc(BaseModel):
    AvailabilityZone: Optional[FieldString] = None
    NetworkInterfaceId: Optional[FieldString] = None


class InputDeviceConfigurableSettings(BaseModel):
    ConfiguredInput: Optional[InputDeviceConfiguredInput] = None
    LatencyMs: Optional[FieldInteger] = None
    MaxBitrate: Optional[FieldInteger] = None


class InputDeviceHdSettings(BaseModel):
    ActiveInput: Optional[InputDeviceActiveInput] = None
    ConfiguredInput: Optional[InputDeviceConfiguredInput] = None
    DeviceState: Optional[InputDeviceState] = None
    Framerate: Optional[FieldDouble] = None
    Height: Optional[FieldInteger] = None
    LatencyMs: Optional[FieldInteger] = None
    MaxBitrate: Optional[FieldInteger] = None
    ScanType: Optional[InputDeviceScanType] = None
    Width: Optional[FieldInteger] = None


class InputDeviceRequest(BaseModel):
    Id: Optional[FieldString] = None


class InputDeviceSettings(BaseModel):
    Id: Optional[FieldString] = None


class InputDeviceUhdSettings(BaseModel):
    ActiveInput: Optional[InputDeviceActiveInput] = None
    ConfiguredInput: Optional[InputDeviceConfiguredInput] = None
    DeviceState: Optional[InputDeviceState] = None
    Framerate: Optional[FieldDouble] = None
    Height: Optional[FieldInteger] = None
    LatencyMs: Optional[FieldInteger] = None
    MaxBitrate: Optional[FieldInteger] = None
    ScanType: Optional[InputDeviceScanType] = None
    Width: Optional[FieldInteger] = None


class InputLocation(BaseModel):
    PasswordParam: Optional[FieldString] = None
    Uri: FieldStringMax2048
    Username: Optional[FieldString] = None


class InputLossBehavior(BaseModel):
    BlackFrameMsec: Optional[FieldIntegerMin0Max1000000] = None
    InputLossImageColor: Optional[FieldStringMin6Max6] = None
    InputLossImageSlate: Optional[InputLocation] = None
    InputLossImageType_1: Optional[InputLossImageType] = Field(
        None, alias='InputLossImageType'
    )
    RepeatFrameMsec: Optional[FieldIntegerMin0Max1000000] = None


class InputLossFailoverSettings(BaseModel):
    InputLossThresholdMsec: Optional[FieldIntegerMin100] = None


class InputSource(BaseModel):
    PasswordParam: Optional[FieldString] = None
    Url: Optional[FieldString] = None
    Username: Optional[FieldString] = None


class InputSourceRequest(BaseModel):
    PasswordParam: Optional[FieldString] = None
    Url: Optional[FieldString] = None
    Username: Optional[FieldString] = None


class InputWhitelistRule(BaseModel):
    Cidr: Optional[FieldString] = None


class InputWhitelistRuleCidr(BaseModel):
    Cidr: Optional[FieldString] = None


class M2tsSettings(BaseModel):
    AbsentInputAudioBehavior: Optional[M2tsAbsentInputAudioBehavior] = None
    Arib: Optional[M2tsArib] = None
    AribCaptionsPid: Optional[FieldString] = None
    AribCaptionsPidControl: Optional[M2tsAribCaptionsPidControl] = None
    AudioBufferModel: Optional[M2tsAudioBufferModel] = None
    AudioFramesPerPes: Optional[FieldIntegerMin0] = None
    AudioPids: Optional[FieldString] = None
    AudioStreamType: Optional[M2tsAudioStreamType] = None
    Bitrate: Optional[FieldIntegerMin0] = None
    BufferModel: Optional[M2tsBufferModel] = None
    CcDescriptor: Optional[M2tsCcDescriptor] = None
    DvbNitSettings_1: Optional[DvbNitSettings] = Field(None, alias='DvbNitSettings')
    DvbSdtSettings_1: Optional[DvbSdtSettings] = Field(None, alias='DvbSdtSettings')
    DvbSubPids: Optional[FieldString] = None
    DvbTdtSettings_1: Optional[DvbTdtSettings] = Field(None, alias='DvbTdtSettings')
    DvbTeletextPid: Optional[FieldString] = None
    Ebif: Optional[M2tsEbifControl] = None
    EbpAudioInterval: Optional[M2tsAudioInterval] = None
    EbpLookaheadMs: Optional[FieldIntegerMin0Max10000] = None
    EbpPlacement: Optional[M2tsEbpPlacement] = None
    EcmPid: Optional[FieldString] = None
    EsRateInPes: Optional[M2tsEsRateInPes] = None
    EtvPlatformPid: Optional[FieldString] = None
    EtvSignalPid: Optional[FieldString] = None
    FragmentTime: Optional[FieldDoubleMin0] = None
    Klv: Optional[M2tsKlv] = None
    KlvDataPids: Optional[FieldString] = None
    NielsenId3Behavior: Optional[M2tsNielsenId3Behavior] = None
    NullPacketBitrate: Optional[FieldDoubleMin0] = None
    PatInterval: Optional[FieldIntegerMin0Max1000] = None
    PcrControl: Optional[M2tsPcrControl] = None
    PcrPeriod: Optional[FieldIntegerMin0Max500] = None
    PcrPid: Optional[FieldString] = None
    PmtInterval: Optional[FieldIntegerMin0Max1000] = None
    PmtPid: Optional[FieldString] = None
    ProgramNum: Optional[FieldIntegerMin0Max65535] = None
    RateMode: Optional[M2tsRateMode] = None
    Scte27Pids: Optional[FieldString] = None
    Scte35Control: Optional[M2tsScte35Control] = None
    Scte35Pid: Optional[FieldString] = None
    Scte35PrerollPullupMilliseconds: Optional[FieldDoubleMin0Max5000] = None
    SegmentationMarkers: Optional[M2tsSegmentationMarkers] = None
    SegmentationStyle: Optional[M2tsSegmentationStyle] = None
    SegmentationTime: Optional[FieldDoubleMin1] = None
    TimedMetadataBehavior: Optional[M2tsTimedMetadataBehavior] = None
    TimedMetadataPid: Optional[FieldString] = None
    TransportStreamId: Optional[FieldIntegerMin0Max65535] = None
    VideoPid: Optional[FieldString] = None


class M3u8Settings(BaseModel):
    AudioFramesPerPes: Optional[FieldIntegerMin0] = None
    AudioPids: Optional[FieldString] = None
    EcmPid: Optional[FieldString] = None
    NielsenId3Behavior: Optional[M3u8NielsenId3Behavior] = None
    PatInterval: Optional[FieldIntegerMin0Max1000] = None
    PcrControl: Optional[M3u8PcrControl] = None
    PcrPeriod: Optional[FieldIntegerMin0Max500] = None
    PcrPid: Optional[FieldString] = None
    PmtInterval: Optional[FieldIntegerMin0Max1000] = None
    PmtPid: Optional[FieldString] = None
    ProgramNum: Optional[FieldIntegerMin0Max65535] = None
    Scte35Behavior: Optional[M3u8Scte35Behavior] = None
    Scte35Pid: Optional[FieldString] = None
    TimedMetadataBehavior: Optional[M3u8TimedMetadataBehavior] = None
    TimedMetadataPid: Optional[FieldString] = None
    TransportStreamId: Optional[FieldIntegerMin0Max65535] = None
    VideoPid: Optional[FieldString] = None


class MaintenanceCreateSettings(BaseModel):
    MaintenanceDay_1: Optional[MaintenanceDay] = Field(None, alias='MaintenanceDay')
    MaintenanceStartTime: Optional[FieldStringPattern010920300] = None


class MaintenanceStatus(BaseModel):
    MaintenanceDay_1: Optional[MaintenanceDay] = Field(None, alias='MaintenanceDay')
    MaintenanceDeadline: Optional[FieldString] = None
    MaintenanceScheduledDate: Optional[FieldString] = None
    MaintenanceStartTime: Optional[FieldString] = None


class MaintenanceUpdateSettings(BaseModel):
    MaintenanceDay_1: Optional[MaintenanceDay] = Field(None, alias='MaintenanceDay')
    MaintenanceScheduledDate: Optional[FieldString] = None
    MaintenanceStartTime: Optional[FieldStringPattern010920300] = None


class MediaConnectFlow(BaseModel):
    FlowArn: Optional[FieldString] = None


class MediaConnectFlowRequest(BaseModel):
    FlowArn: Optional[FieldString] = None


class MediaPackageOutputDestinationSettings(BaseModel):
    ChannelId: Optional[FieldStringMin1] = None


class MotionGraphicsActivateScheduleActionSettings(BaseModel):
    Duration: Optional[FieldLongMin0Max86400000] = None
    PasswordParam: Optional[FieldString] = None
    Url: Optional[FieldString] = None
    Username: Optional[FieldString] = None


class MotionGraphicsConfiguration(BaseModel):
    MotionGraphicsInsertion_1: Optional[MotionGraphicsInsertion] = Field(
        None, alias='MotionGraphicsInsertion'
    )
    MotionGraphicsSettings_1: MotionGraphicsSettings = Field(
        ..., alias='MotionGraphicsSettings'
    )


class Mp2Settings(BaseModel):
    Bitrate: Optional[FieldDouble] = None
    CodingMode: Optional[Mp2CodingMode] = None
    SampleRate: Optional[FieldDouble] = None


class MsSmoothOutputSettings(BaseModel):
    H265PackagingType: Optional[MsSmoothH265PackagingType] = None
    NameModifier: Optional[FieldString] = None


class MultiplexMediaConnectOutputDestinationSettings(BaseModel):
    EntitlementArn: Optional[FieldStringMin1] = None


class MultiplexOutputDestination(BaseModel):
    MediaConnectSettings: Optional[MultiplexMediaConnectOutputDestinationSettings] = (
        None
    )


class MultiplexProgramChannelDestinationSettings(BaseModel):
    MultiplexId: Optional[FieldStringMin1] = None
    ProgramName: Optional[FieldStringMin1] = None


class MultiplexProgramPacketIdentifiersMap(BaseModel):
    AudioPids: Optional[FieldListOfInteger] = None
    DvbSubPids: Optional[FieldListOfInteger] = None
    DvbTeletextPid: Optional[FieldInteger] = None
    EtvPlatformPid: Optional[FieldInteger] = None
    EtvSignalPid: Optional[FieldInteger] = None
    KlvDataPids: Optional[FieldListOfInteger] = None
    PcrPid: Optional[FieldInteger] = None
    PmtPid: Optional[FieldInteger] = None
    PrivateMetadataPid: Optional[FieldInteger] = None
    Scte27Pids: Optional[FieldListOfInteger] = None
    Scte35Pid: Optional[FieldInteger] = None
    TimedMetadataPid: Optional[FieldInteger] = None
    VideoPid: Optional[FieldInteger] = None


class MultiplexProgramPipelineDetail(BaseModel):
    ActiveChannelPipeline: Optional[FieldString] = None
    PipelineId: Optional[FieldString] = None


class MultiplexProgramServiceDescriptor(BaseModel):
    ProviderName: FieldStringMax256
    ServiceName: FieldStringMax256


class MultiplexProgramSummary(BaseModel):
    ChannelId: Optional[FieldString] = None
    ProgramName: Optional[FieldString] = None


class MultiplexSettings(BaseModel):
    MaximumVideoBufferDelayMilliseconds: Optional[FieldIntegerMin800Max3000] = None
    TransportStreamBitrate: FieldIntegerMin1000000Max100000000
    TransportStreamId: FieldIntegerMin0Max65535
    TransportStreamReservedBitrate: Optional[FieldIntegerMin0Max100000000] = None


class MultiplexSettingsSummary(BaseModel):
    TransportStreamBitrate: Optional[FieldIntegerMin1000000Max100000000] = None


class MultiplexStatmuxVideoSettings(BaseModel):
    MaximumBitrate: Optional[FieldIntegerMin100000Max100000000] = None
    MinimumBitrate: Optional[FieldIntegerMin100000Max100000000] = None
    Priority: Optional[FieldIntegerMinNegative5Max5] = None


class MultiplexVideoSettings(BaseModel):
    ConstantBitrate: Optional[FieldIntegerMin100000Max100000000] = None
    StatmuxSettings: Optional[MultiplexStatmuxVideoSettings] = None


class NetworkInputSettings(BaseModel):
    HlsInputSettings_1: Optional[HlsInputSettings] = Field(
        None, alias='HlsInputSettings'
    )
    ServerValidation: Optional[NetworkInputServerValidation] = None


class NielsenCBET(BaseModel):
    CbetCheckDigitString: FieldStringMin2Max2
    CbetStepaside: NielsenWatermarksCbetStepaside
    Csid: FieldStringMin1Max7


class NielsenConfiguration(BaseModel):
    DistributorId: Optional[FieldString] = None
    NielsenPcmToId3Tagging: Optional[NielsenPcmToId3TaggingState] = None


class NielsenNaesIiNw(BaseModel):
    CheckDigitString: FieldStringMin2Max2
    Sid: FieldDoubleMin1Max65535
    Timezone: Optional[NielsenWatermarkTimezones] = None


class NielsenWatermarksSettings(BaseModel):
    NielsenCbetSettings: Optional[NielsenCBET] = None
    NielsenDistributionType: Optional[NielsenWatermarksDistributionTypes] = None
    NielsenNaesIiNwSettings: Optional[NielsenNaesIiNw] = None


class OutputDestinationSettings(BaseModel):
    PasswordParam: Optional[FieldString] = None
    StreamName: Optional[FieldString] = None
    Url: Optional[FieldString] = None
    Username: Optional[FieldString] = None


class OutputLocationRef(BaseModel):
    DestinationRefId: Optional[FieldString] = None


class PauseStateScheduleActionSettings(BaseModel):
    Pipelines: Optional[FieldListOfPipelinePauseStateSettings] = None


class PipelineDetail(BaseModel):
    ActiveInputAttachmentName: Optional[FieldString] = None
    ActiveInputSwitchActionName: Optional[FieldString] = None
    ActiveMotionGraphicsActionName: Optional[FieldString] = None
    ActiveMotionGraphicsUri: Optional[FieldString] = None
    PipelineId: Optional[FieldString] = None


class ReservationResourceSpecification(BaseModel):
    ChannelClass_1: Optional[ChannelClass] = Field(None, alias='ChannelClass')
    Codec: Optional[ReservationCodec] = None
    MaximumBitrate: Optional[ReservationMaximumBitrate] = None
    MaximumFramerate: Optional[ReservationMaximumFramerate] = None
    Resolution: Optional[ReservationResolution] = None
    ResourceType: Optional[ReservationResourceType] = None
    SpecialFeature: Optional[ReservationSpecialFeature] = None
    VideoQuality: Optional[ReservationVideoQuality] = None


class RtmpGroupSettings(BaseModel):
    AdMarkers: Optional[FieldListOfRtmpAdMarkers] = None
    AuthenticationScheme_1: Optional[AuthenticationScheme] = Field(
        None, alias='AuthenticationScheme'
    )
    CacheFullBehavior: Optional[RtmpCacheFullBehavior] = None
    CacheLength: Optional[FieldIntegerMin30] = None
    CaptionData: Optional[RtmpCaptionData] = None
    InputLossAction: Optional[InputLossActionForRtmpOut] = None
    RestartDelay: Optional[FieldIntegerMin0] = None


class RtmpOutputSettings(BaseModel):
    CertificateMode: Optional[RtmpOutputCertificateMode] = None
    ConnectionRetryInterval: Optional[FieldIntegerMin1] = None
    Destination: OutputLocationRef
    NumRetries: Optional[FieldIntegerMin0] = None


class ScheduleActionStartSettings(BaseModel):
    FixedModeScheduleActionStartSettings_1: Optional[
        FixedModeScheduleActionStartSettings
    ] = Field(None, alias='FixedModeScheduleActionStartSettings')
    FollowModeScheduleActionStartSettings_1: Optional[
        FollowModeScheduleActionStartSettings
    ] = Field(None, alias='FollowModeScheduleActionStartSettings')
    ImmediateModeScheduleActionStartSettings_1: Optional[
        ImmediateModeScheduleActionStartSettings
    ] = Field(None, alias='ImmediateModeScheduleActionStartSettings')


class Scte20SourceSettings(BaseModel):
    Convert608To708: Optional[Scte20Convert608To708] = None
    Source608ChannelNumber: Optional[FieldIntegerMin1Max4] = None


class Scte27SourceSettings(BaseModel):
    OcrLanguage: Optional[Scte27OcrLanguage] = None
    Pid: Optional[FieldIntegerMin1] = None


class Scte35DeliveryRestrictions(BaseModel):
    ArchiveAllowedFlag: Scte35ArchiveAllowedFlag
    DeviceRestrictions: Scte35DeviceRestrictions
    NoRegionalBlackoutFlag: Scte35NoRegionalBlackoutFlag
    WebDeliveryAllowedFlag: Scte35WebDeliveryAllowedFlag


class Scte35InputScheduleActionSettings(BaseModel):
    InputAttachmentNameReference: Optional[FieldString] = None
    Mode: Scte35InputMode


class Scte35ReturnToNetworkScheduleActionSettings(BaseModel):
    SpliceEventId: FieldLongMin0Max4294967295


class Scte35SegmentationDescriptor(BaseModel):
    DeliveryRestrictions: Optional[Scte35DeliveryRestrictions] = None
    SegmentNum: Optional[FieldIntegerMin0Max255] = None
    SegmentationCancelIndicator: Scte35SegmentationCancelIndicator
    SegmentationDuration: Optional[FieldLongMin0Max1099511627775] = None
    SegmentationEventId: FieldLongMin0Max4294967295
    SegmentationTypeId: Optional[FieldIntegerMin0Max255] = None
    SegmentationUpid: Optional[FieldString] = None
    SegmentationUpidType: Optional[FieldIntegerMin0Max255] = None
    SegmentsExpected: Optional[FieldIntegerMin0Max255] = None
    SubSegmentNum: Optional[FieldIntegerMin0Max255] = None
    SubSegmentsExpected: Optional[FieldIntegerMin0Max255] = None


class Scte35SpliceInsert(BaseModel):
    AdAvailOffset: Optional[FieldIntegerMinNegative1000Max1000] = None
    NoRegionalBlackoutFlag: Optional[Scte35SpliceInsertNoRegionalBlackoutBehavior] = (
        None
    )
    WebDeliveryAllowedFlag: Optional[Scte35SpliceInsertWebDeliveryAllowedBehavior] = (
        None
    )


class Scte35SpliceInsertScheduleActionSettings(BaseModel):
    Duration: Optional[FieldLongMin0Max8589934591] = None
    SpliceEventId: FieldLongMin0Max4294967295


class Scte35TimeSignalApos(BaseModel):
    AdAvailOffset: Optional[FieldIntegerMinNegative1000Max1000] = None
    NoRegionalBlackoutFlag: Optional[Scte35AposNoRegionalBlackoutBehavior] = None
    WebDeliveryAllowedFlag: Optional[Scte35AposWebDeliveryAllowedBehavior] = None


class StandardHlsSettings(BaseModel):
    AudioRenditionSets: Optional[FieldString] = None
    M3u8Settings_1: M3u8Settings = Field(..., alias='M3u8Settings')


class StartTimecode(BaseModel):
    Timecode: Optional[FieldString] = None


class StaticImageActivateScheduleActionSettings(BaseModel):
    Duration: Optional[FieldIntegerMin0] = None
    FadeIn: Optional[FieldIntegerMin0] = None
    FadeOut: Optional[FieldIntegerMin0] = None
    Height: Optional[FieldIntegerMin1] = None
    Image: InputLocation
    ImageX: Optional[FieldIntegerMin0] = None
    ImageY: Optional[FieldIntegerMin0] = None
    Layer: Optional[FieldIntegerMin0Max7] = None
    Opacity: Optional[FieldIntegerMin0Max100] = None
    Width: Optional[FieldIntegerMin1] = None


class StaticImageDeactivateScheduleActionSettings(BaseModel):
    FadeOut: Optional[FieldIntegerMin0] = None
    Layer: Optional[FieldIntegerMin0Max7] = None


class StaticKeySettings(BaseModel):
    KeyProviderServer: Optional[InputLocation] = None
    StaticKeyValue: FieldStringMin32Max32


class StopTimecode(BaseModel):
    LastFrameClippingBehavior_1: Optional[LastFrameClippingBehavior] = Field(
        None, alias='LastFrameClippingBehavior'
    )
    Timecode: Optional[FieldString] = None


class Tags(RootModel[Optional[Dict[str, FieldString]]]):
    root: Optional[Dict[str, FieldString]] = None


class TeletextSourceSettings(BaseModel):
    OutputRectangle: Optional[CaptionRectangle] = None
    PageNumber: Optional[FieldString] = None


class TemporalFilterSettings(BaseModel):
    PostFilterSharpening: Optional[TemporalFilterPostFilterSharpening] = None
    Strength: Optional[TemporalFilterStrength] = None


class TimecodeBurninSettings(BaseModel):
    FontSize: TimecodeBurninFontSize
    Position: TimecodeBurninPosition
    Prefix: Optional[FieldStringMax255] = None


class TimecodeConfig(BaseModel):
    Source: TimecodeConfigSource
    SyncThreshold: Optional[FieldIntegerMin1Max1000000] = None


class TransferInputDeviceRequest(BaseModel):
    TargetCustomerId: Optional[FieldString] = None
    TargetRegion: Optional[FieldString] = None
    TransferMessage: Optional[FieldString] = None


class TransferringInputDeviceSummary(BaseModel):
    Id: Optional[FieldString] = None
    Message: Optional[FieldString] = None
    TargetCustomerId: Optional[FieldString] = None
    TransferType: Optional[InputDeviceTransferType] = None


class TtmlDestinationSettings(BaseModel):
    StyleControl: Optional[TtmlDestinationStyleControl] = None


class UdpContainerSettings(BaseModel):
    M2tsSettings_1: Optional[M2tsSettings] = Field(None, alias='M2tsSettings')


class UdpGroupSettings(BaseModel):
    InputLossAction: Optional[InputLossActionForUdpOut] = None
    TimedMetadataId3Frame: Optional[UdpTimedMetadataId3Frame] = None
    TimedMetadataId3Period: Optional[FieldIntegerMin0] = None


class UdpOutputSettings(BaseModel):
    BufferMsec: Optional[FieldIntegerMin0Max10000] = None
    ContainerSettings: UdpContainerSettings
    Destination: OutputLocationRef
    FecOutputSettings_1: Optional[FecOutputSettings] = Field(
        None, alias='FecOutputSettings'
    )


class UpdateInputDeviceRequest(BaseModel):
    HdDeviceSettings: Optional[InputDeviceConfigurableSettings] = None
    Name: Optional[FieldString] = None
    UhdDeviceSettings: Optional[InputDeviceConfigurableSettings] = None


class UpdateMultiplexRequest(BaseModel):
    MultiplexSettings_1: Optional[MultiplexSettings] = Field(
        None, alias='MultiplexSettings'
    )
    Name: Optional[FieldString] = None


class UpdateReservationRequest(BaseModel):
    Name: Optional[FieldString] = None
    RenewalSettings_1: Optional[RenewalSettings] = Field(None, alias='RenewalSettings')


class VideoBlackFailoverSettings(BaseModel):
    BlackDetectThreshold: Optional[FieldDoubleMin0Max1] = None
    VideoBlackThresholdMsec: Optional[FieldIntegerMin1000] = None


class VideoSelectorColorSpaceSettings(BaseModel):
    Hdr10Settings_1: Optional[Hdr10Settings] = Field(None, alias='Hdr10Settings')


class VideoSelectorPid(BaseModel):
    Pid: Optional[FieldIntegerMin0Max8191] = None


class VideoSelectorProgramId(BaseModel):
    ProgramId: Optional[FieldIntegerMin0Max65536] = None


class VideoSelectorSettings(BaseModel):
    VideoSelectorPid_1: Optional[VideoSelectorPid] = Field(
        None, alias='VideoSelectorPid'
    )
    VideoSelectorProgramId_1: Optional[VideoSelectorProgramId] = Field(
        None, alias='VideoSelectorProgramId'
    )


class WavSettings(BaseModel):
    BitDepth: Optional[FieldDouble] = None
    CodingMode: Optional[WavCodingMode] = None
    SampleRate: Optional[FieldDouble] = None


class WebvttDestinationSettings(BaseModel):
    StyleControl: Optional[WebvttDestinationStyleControl] = None


class FieldListOfAudioTrack(RootModel[List[AudioTrack]]):
    root: List[AudioTrack] = Field(
        ..., description='Placeholder documentation for __listOfAudioTrack'
    )


class FieldListOfBatchFailedResultModel(RootModel[List[BatchFailedResultModel]]):
    root: List[BatchFailedResultModel] = Field(
        ..., description='Placeholder documentation for __listOfBatchFailedResultModel'
    )


class FieldListOfBatchSuccessfulResultModel(
    RootModel[List[BatchSuccessfulResultModel]]
):
    root: List[BatchSuccessfulResultModel] = Field(
        ...,
        description='Placeholder documentation for __listOfBatchSuccessfulResultModel',
    )


class FieldListOfCaptionLanguageMapping(RootModel[List[CaptionLanguageMapping]]):
    root: List[CaptionLanguageMapping] = Field(
        ..., description='Placeholder documentation for __listOfCaptionLanguageMapping'
    )


class FieldListOfChannelEgressEndpoint(RootModel[List[ChannelEgressEndpoint]]):
    root: List[ChannelEgressEndpoint] = Field(
        ..., description='Placeholder documentation for __listOfChannelEgressEndpoint'
    )


class FieldListOfInputChannelLevel(RootModel[List[InputChannelLevel]]):
    root: List[InputChannelLevel] = Field(
        ..., description='Placeholder documentation for __listOfInputChannelLevel'
    )


class FieldListOfInputDestinationRequest(RootModel[List[InputDestinationRequest]]):
    root: List[InputDestinationRequest] = Field(
        ..., description='Placeholder documentation for __listOfInputDestinationRequest'
    )


class FieldListOfInputDeviceRequest(RootModel[List[InputDeviceRequest]]):
    root: List[InputDeviceRequest] = Field(
        ..., description='Placeholder documentation for __listOfInputDeviceRequest'
    )


class FieldListOfInputDeviceSettings(RootModel[List[InputDeviceSettings]]):
    root: List[InputDeviceSettings] = Field(
        ..., description='Placeholder documentation for __listOfInputDeviceSettings'
    )


class FieldListOfInputSource(RootModel[List[InputSource]]):
    root: List[InputSource] = Field(
        ..., description='Placeholder documentation for __listOfInputSource'
    )


class FieldListOfInputSourceRequest(RootModel[List[InputSourceRequest]]):
    root: List[InputSourceRequest] = Field(
        ..., description='Placeholder documentation for __listOfInputSourceRequest'
    )


class FieldListOfInputWhitelistRule(RootModel[List[InputWhitelistRule]]):
    root: List[InputWhitelistRule] = Field(
        ..., description='Placeholder documentation for __listOfInputWhitelistRule'
    )


class FieldListOfInputWhitelistRuleCidr(RootModel[List[InputWhitelistRuleCidr]]):
    root: List[InputWhitelistRuleCidr] = Field(
        ..., description='Placeholder documentation for __listOfInputWhitelistRuleCidr'
    )


class FieldListOfMediaConnectFlow(RootModel[List[MediaConnectFlow]]):
    root: List[MediaConnectFlow] = Field(
        ..., description='Placeholder documentation for __listOfMediaConnectFlow'
    )


class FieldListOfMediaConnectFlowRequest(RootModel[List[MediaConnectFlowRequest]]):
    root: List[MediaConnectFlowRequest] = Field(
        ..., description='Placeholder documentation for __listOfMediaConnectFlowRequest'
    )


class FieldListOfMediaPackageOutputDestinationSettings(
    RootModel[List[MediaPackageOutputDestinationSettings]]
):
    root: List[MediaPackageOutputDestinationSettings] = Field(
        ...,
        description='Placeholder documentation for __listOfMediaPackageOutputDestinationSettings',
    )


class FieldListOfMultiplexOutputDestination(
    RootModel[List[MultiplexOutputDestination]]
):
    root: List[MultiplexOutputDestination] = Field(
        ...,
        description='Placeholder documentation for __listOfMultiplexOutputDestination',
    )


class FieldListOfMultiplexProgramPipelineDetail(
    RootModel[List[MultiplexProgramPipelineDetail]]
):
    root: List[MultiplexProgramPipelineDetail] = Field(
        ...,
        description='Placeholder documentation for __listOfMultiplexProgramPipelineDetail',
    )


class FieldListOfMultiplexProgramSummary(RootModel[List[MultiplexProgramSummary]]):
    root: List[MultiplexProgramSummary] = Field(
        ..., description='Placeholder documentation for __listOfMultiplexProgramSummary'
    )


class FieldListOfOutputDestinationSettings(RootModel[List[OutputDestinationSettings]]):
    root: List[OutputDestinationSettings] = Field(
        ...,
        description='Placeholder documentation for __listOfOutputDestinationSettings',
    )


class FieldListOfPipelineDetail(RootModel[List[PipelineDetail]]):
    root: List[PipelineDetail] = Field(
        ..., description='Placeholder documentation for __listOfPipelineDetail'
    )


class FieldListOfTransferringInputDeviceSummary(
    RootModel[List[TransferringInputDeviceSummary]]
):
    root: List[TransferringInputDeviceSummary] = Field(
        ...,
        description='Placeholder documentation for __listOfTransferringInputDeviceSummary',
    )


class FieldListOfString(RootModel[List[FieldString]]):
    root: List[FieldString] = Field(
        ..., description='Placeholder documentation for __listOf__string'
    )


class Vpc(BaseModel):
    PublicAddressAllocationIds: Optional[FieldListOfString] = None
    SecurityGroupIds: Optional[FieldListOfString] = None
    SubnetIds: Optional[FieldListOfString] = None


class Deletes(BaseModel):
    ActionNames: Optional[FieldListOfString] = None


class ProdInputSecurityGroupsPostRequest(BaseModel):
    tags: Optional[Dict[str, FieldString]] = Field(
        None, description='Placeholder documentation for Tags'
    )
    whitelistRules: Optional[List[InputWhitelistRuleCidr]] = Field(
        None, description='Placeholder documentation for __listOfInputWhitelistRuleCidr'
    )


class ProdInputSecurityGroupsInputSecurityGroupIdPutRequest(BaseModel):
    tags: Optional[Dict[str, FieldString]] = Field(
        None, description='Placeholder documentation for Tags'
    )
    whitelistRules: Optional[List[InputWhitelistRuleCidr]] = Field(
        None, description='Placeholder documentation for __listOfInputWhitelistRuleCidr'
    )


class Vpc1(BaseModel):
    SecurityGroupIds: Optional[FieldListOfString] = None
    SubnetIds: Optional[FieldListOfString] = None


class ProdInputsPostRequest(BaseModel):
    destinations: Optional[List[InputDestinationRequest]] = Field(
        None,
        description='Placeholder documentation for __listOfInputDestinationRequest',
    )
    inputDevices: Optional[List[InputDeviceSettings]] = Field(
        None, description='Placeholder documentation for __listOfInputDeviceSettings'
    )
    inputSecurityGroups: Optional[List[FieldString]] = Field(
        None, description='Placeholder documentation for __listOf__string'
    )
    mediaConnectFlows: Optional[List[MediaConnectFlowRequest]] = Field(
        None,
        description='Placeholder documentation for __listOfMediaConnectFlowRequest',
    )
    name: Optional[str] = Field(
        None, description='Placeholder documentation for __string'
    )
    requestId: Optional[str] = Field(
        None, description='Placeholder documentation for __string'
    )
    roleArn: Optional[str] = Field(
        None, description='Placeholder documentation for __string'
    )
    sources: Optional[List[InputSourceRequest]] = Field(
        None, description='Placeholder documentation for __listOfInputSourceRequest'
    )
    tags: Optional[Dict[str, FieldString]] = Field(
        None, description='Placeholder documentation for Tags'
    )
    type: Optional[Type] = Field(
        None,
        description='The different types of inputs that AWS Elemental MediaLive supports.',
    )
    vpc: Optional[Vpc1] = Field(
        None,
        description='Settings for a private VPC Input.\nWhen this property is specified, the input destination addresses will be created in a VPC rather than with public Internet addresses.\nThis property requires setting the roleArn property on Input creation.\nNot compatible with the inputSecurityGroups property.\n',
    )


class ProdInputsInputIdPutRequest(BaseModel):
    destinations: Optional[List[InputDestinationRequest]] = Field(
        None,
        description='Placeholder documentation for __listOfInputDestinationRequest',
    )
    inputDevices: Optional[List[InputDeviceRequest]] = Field(
        None, description='Placeholder documentation for __listOfInputDeviceRequest'
    )
    inputSecurityGroups: Optional[List[FieldString]] = Field(
        None, description='Placeholder documentation for __listOf__string'
    )
    mediaConnectFlows: Optional[List[MediaConnectFlowRequest]] = Field(
        None,
        description='Placeholder documentation for __listOfMediaConnectFlowRequest',
    )
    name: Optional[str] = Field(
        None, description='Placeholder documentation for __string'
    )
    roleArn: Optional[str] = Field(
        None, description='Placeholder documentation for __string'
    )
    sources: Optional[List[InputSourceRequest]] = Field(
        None, description='Placeholder documentation for __listOfInputSourceRequest'
    )


class MultiplexProgramSettings1(BaseModel):
    PreferredChannelPipeline_1: Optional[PreferredChannelPipeline] = Field(
        None, alias='PreferredChannelPipeline'
    )
    ProgramNumber: Optional[FieldIntegerMin0Max65535] = None
    ServiceDescriptor: Optional[MultiplexProgramServiceDescriptor] = None
    VideoSettings: Optional[MultiplexVideoSettings] = None


class ProdMultiplexesMultiplexIdProgramsPostRequest(BaseModel):
    multiplexProgramSettings: MultiplexProgramSettings1 = Field(
        ..., description='Multiplex Program settings configuration.'
    )
    programName: str = Field(..., description='Placeholder documentation for __string')
    requestId: str = Field(..., description='Placeholder documentation for __string')


class ProdMultiplexesMultiplexIdProgramsProgramNamePutRequest(BaseModel):
    multiplexProgramSettings: Optional[MultiplexProgramSettings1] = Field(
        None, description='Multiplex Program settings configuration.'
    )


class ArchiveCdnSettings(BaseModel):
    ArchiveS3Settings_1: Optional[ArchiveS3Settings] = Field(
        None, alias='ArchiveS3Settings'
    )


class ArchiveContainerSettings(BaseModel):
    M2tsSettings_1: Optional[M2tsSettings] = Field(None, alias='M2tsSettings')
    RawSettings_1: Optional[RawSettings] = Field(None, alias='RawSettings')


class ArchiveGroupSettings(BaseModel):
    ArchiveCdnSettings_1: Optional[ArchiveCdnSettings] = Field(
        None, alias='ArchiveCdnSettings'
    )
    Destination: OutputLocationRef
    RolloverInterval: Optional[FieldIntegerMin1] = None


class ArchiveOutputSettings(BaseModel):
    ContainerSettings: ArchiveContainerSettings
    Extension: Optional[FieldString] = None
    NameModifier: Optional[FieldString] = None


class AudioChannelMapping(BaseModel):
    InputChannelLevels: FieldListOfInputChannelLevel
    OutputChannel: FieldIntegerMin0Max7


class AudioCodecSettings(BaseModel):
    AacSettings_1: Optional[AacSettings] = Field(None, alias='AacSettings')
    Ac3Settings_1: Optional[Ac3Settings] = Field(None, alias='Ac3Settings')
    Eac3AtmosSettings_1: Optional[Eac3AtmosSettings] = Field(
        None, alias='Eac3AtmosSettings'
    )
    Eac3Settings_1: Optional[Eac3Settings] = Field(None, alias='Eac3Settings')
    Mp2Settings_1: Optional[Mp2Settings] = Field(None, alias='Mp2Settings')
    PassThroughSettings_1: Optional[PassThroughSettings] = Field(
        None, alias='PassThroughSettings'
    )
    WavSettings_1: Optional[WavSettings] = Field(None, alias='WavSettings')


class AudioOnlyHlsSettings(BaseModel):
    AudioGroupId: Optional[FieldString] = None
    AudioOnlyImage: Optional[InputLocation] = None
    AudioTrackType: Optional[AudioOnlyHlsTrackType] = None
    SegmentType: Optional[AudioOnlyHlsSegmentType] = None


class AudioTrackSelection(BaseModel):
    DolbyEDecode: Optional[AudioDolbyEDecode] = None
    Tracks: FieldListOfAudioTrack


class AudioWatermarkSettings(BaseModel):
    NielsenWatermarksSettings_1: Optional[NielsenWatermarksSettings] = Field(
        None, alias='NielsenWatermarksSettings'
    )


class AvailBlanking(BaseModel):
    AvailBlankingImage: Optional[InputLocation] = None
    State: Optional[AvailBlankingState] = None


class AvailSettings(BaseModel):
    Esam_1: Optional[Esam] = Field(None, alias='Esam')
    Scte35SpliceInsert_1: Optional[Scte35SpliceInsert] = Field(
        None, alias='Scte35SpliceInsert'
    )
    Scte35TimeSignalApos_1: Optional[Scte35TimeSignalApos] = Field(
        None, alias='Scte35TimeSignalApos'
    )


class BatchDeleteRequest(BaseModel):
    ChannelIds: Optional[FieldListOfString] = None
    InputIds: Optional[FieldListOfString] = None
    InputSecurityGroupIds: Optional[FieldListOfString] = None
    MultiplexIds: Optional[FieldListOfString] = None


class BatchDeleteResponse(BaseModel):
    Failed: Optional[FieldListOfBatchFailedResultModel] = None
    Successful: Optional[FieldListOfBatchSuccessfulResultModel] = None


class BatchScheduleActionDeleteRequest(BaseModel):
    ActionNames: FieldListOfString


class BatchStartRequest(BaseModel):
    ChannelIds: Optional[FieldListOfString] = None
    MultiplexIds: Optional[FieldListOfString] = None


class BatchStartResponse(BaseModel):
    Failed: Optional[FieldListOfBatchFailedResultModel] = None
    Successful: Optional[FieldListOfBatchSuccessfulResultModel] = None


class BatchStopRequest(BaseModel):
    ChannelIds: Optional[FieldListOfString] = None
    MultiplexIds: Optional[FieldListOfString] = None


class BatchStopResponse(BaseModel):
    Failed: Optional[FieldListOfBatchFailedResultModel] = None
    Successful: Optional[FieldListOfBatchSuccessfulResultModel] = None


class BlackoutSlate(BaseModel):
    BlackoutSlateImage: Optional[InputLocation] = None
    NetworkEndBlackout: Optional[BlackoutSlateNetworkEndBlackout] = None
    NetworkEndBlackoutImage: Optional[InputLocation] = None
    NetworkId: Optional[FieldStringMin34Max34] = None
    State: Optional[BlackoutSlateState] = None


class BurnInDestinationSettings(BaseModel):
    Alignment: Optional[BurnInAlignment] = None
    BackgroundColor: Optional[BurnInBackgroundColor] = None
    BackgroundOpacity: Optional[FieldIntegerMin0Max255] = None
    Font: Optional[InputLocation] = None
    FontColor: Optional[BurnInFontColor] = None
    FontOpacity: Optional[FieldIntegerMin0Max255] = None
    FontResolution: Optional[FieldIntegerMin96Max600] = None
    FontSize: Optional[FieldString] = None
    OutlineColor: Optional[BurnInOutlineColor] = None
    OutlineSize: Optional[FieldIntegerMin0Max10] = None
    ShadowColor: Optional[BurnInShadowColor] = None
    ShadowOpacity: Optional[FieldIntegerMin0Max255] = None
    ShadowXOffset: Optional[FieldInteger] = None
    ShadowYOffset: Optional[FieldInteger] = None
    TeletextGridControl: Optional[BurnInTeletextGridControl] = None
    XPosition: Optional[FieldIntegerMin0] = None
    YPosition: Optional[FieldIntegerMin0] = None


class CaptionSelectorSettings(BaseModel):
    AncillarySourceSettings_1: Optional[AncillarySourceSettings] = Field(
        None, alias='AncillarySourceSettings'
    )
    AribSourceSettings_1: Optional[AribSourceSettings] = Field(
        None, alias='AribSourceSettings'
    )
    DvbSubSourceSettings_1: Optional[DvbSubSourceSettings] = Field(
        None, alias='DvbSubSourceSettings'
    )
    EmbeddedSourceSettings_1: Optional[EmbeddedSourceSettings] = Field(
        None, alias='EmbeddedSourceSettings'
    )
    Scte20SourceSettings_1: Optional[Scte20SourceSettings] = Field(
        None, alias='Scte20SourceSettings'
    )
    Scte27SourceSettings_1: Optional[Scte27SourceSettings] = Field(
        None, alias='Scte27SourceSettings'
    )
    TeletextSourceSettings_1: Optional[TeletextSourceSettings] = Field(
        None, alias='TeletextSourceSettings'
    )


class CreateInputSecurityGroupRequest(BaseModel):
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    WhitelistRules: Optional[FieldListOfInputWhitelistRuleCidr] = None


class CreateMultiplexRequest(BaseModel):
    AvailabilityZones: FieldListOfString
    MultiplexSettings_1: MultiplexSettings = Field(..., alias='MultiplexSettings')
    Name: FieldString
    RequestId: FieldString
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class CreatePartnerInputRequest(BaseModel):
    RequestId: Optional[FieldString] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class CreateTagsRequest(BaseModel):
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class DeleteMultiplexResponse(BaseModel):
    Arn: Optional[FieldString] = None
    AvailabilityZones: Optional[FieldListOfString] = None
    Destinations: Optional[FieldListOfMultiplexOutputDestination] = None
    Id: Optional[FieldString] = None
    MultiplexSettings_1: Optional[MultiplexSettings] = Field(
        None, alias='MultiplexSettings'
    )
    Name: Optional[FieldString] = None
    PipelinesRunningCount: Optional[FieldInteger] = None
    ProgramCount: Optional[FieldInteger] = None
    State: Optional[MultiplexState] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class DeleteReservationResponse(BaseModel):
    Arn: Optional[FieldString] = None
    Count: Optional[FieldInteger] = None
    CurrencyCode: Optional[FieldString] = None
    Duration: Optional[FieldInteger] = None
    DurationUnits: Optional[OfferingDurationUnits] = None
    End: Optional[FieldString] = None
    FixedPrice: Optional[FieldDouble] = None
    Name: Optional[FieldString] = None
    OfferingDescription: Optional[FieldString] = None
    OfferingId: Optional[FieldString] = None
    OfferingType_1: Optional[OfferingType] = Field(None, alias='OfferingType')
    Region: Optional[FieldString] = None
    RenewalSettings_1: Optional[RenewalSettings] = Field(None, alias='RenewalSettings')
    ReservationId: Optional[FieldString] = None
    ResourceSpecification: Optional[ReservationResourceSpecification] = None
    Start: Optional[FieldString] = None
    State: Optional[ReservationState] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    UsagePrice: Optional[FieldDouble] = None


class DescribeInputSecurityGroupResponse(BaseModel):
    Arn: Optional[FieldString] = None
    Id: Optional[FieldString] = None
    Inputs: Optional[FieldListOfString] = None
    State: Optional[InputSecurityGroupState] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    WhitelistRules: Optional[FieldListOfInputWhitelistRule] = None


class DescribeMultiplexResponse(BaseModel):
    Arn: Optional[FieldString] = None
    AvailabilityZones: Optional[FieldListOfString] = None
    Destinations: Optional[FieldListOfMultiplexOutputDestination] = None
    Id: Optional[FieldString] = None
    MultiplexSettings_1: Optional[MultiplexSettings] = Field(
        None, alias='MultiplexSettings'
    )
    Name: Optional[FieldString] = None
    PipelinesRunningCount: Optional[FieldInteger] = None
    ProgramCount: Optional[FieldInteger] = None
    State: Optional[MultiplexState] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class DescribeOfferingResponse(BaseModel):
    Arn: Optional[FieldString] = None
    CurrencyCode: Optional[FieldString] = None
    Duration: Optional[FieldInteger] = None
    DurationUnits: Optional[OfferingDurationUnits] = None
    FixedPrice: Optional[FieldDouble] = None
    OfferingDescription: Optional[FieldString] = None
    OfferingId: Optional[FieldString] = None
    OfferingType_1: Optional[OfferingType] = Field(None, alias='OfferingType')
    Region: Optional[FieldString] = None
    ResourceSpecification: Optional[ReservationResourceSpecification] = None
    UsagePrice: Optional[FieldDouble] = None


class DescribeReservationResponse(BaseModel):
    Arn: Optional[FieldString] = None
    Count: Optional[FieldInteger] = None
    CurrencyCode: Optional[FieldString] = None
    Duration: Optional[FieldInteger] = None
    DurationUnits: Optional[OfferingDurationUnits] = None
    End: Optional[FieldString] = None
    FixedPrice: Optional[FieldDouble] = None
    Name: Optional[FieldString] = None
    OfferingDescription: Optional[FieldString] = None
    OfferingId: Optional[FieldString] = None
    OfferingType_1: Optional[OfferingType] = Field(None, alias='OfferingType')
    Region: Optional[FieldString] = None
    RenewalSettings_1: Optional[RenewalSettings] = Field(None, alias='RenewalSettings')
    ReservationId: Optional[FieldString] = None
    ResourceSpecification: Optional[ReservationResourceSpecification] = None
    Start: Optional[FieldString] = None
    State: Optional[ReservationState] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    UsagePrice: Optional[FieldDouble] = None


class DvbSubDestinationSettings(BaseModel):
    Alignment: Optional[DvbSubDestinationAlignment] = None
    BackgroundColor: Optional[DvbSubDestinationBackgroundColor] = None
    BackgroundOpacity: Optional[FieldIntegerMin0Max255] = None
    Font: Optional[InputLocation] = None
    FontColor: Optional[DvbSubDestinationFontColor] = None
    FontOpacity: Optional[FieldIntegerMin0Max255] = None
    FontResolution: Optional[FieldIntegerMin96Max600] = None
    FontSize: Optional[FieldString] = None
    OutlineColor: Optional[DvbSubDestinationOutlineColor] = None
    OutlineSize: Optional[FieldIntegerMin0Max10] = None
    ShadowColor: Optional[DvbSubDestinationShadowColor] = None
    ShadowOpacity: Optional[FieldIntegerMin0Max255] = None
    ShadowXOffset: Optional[FieldInteger] = None
    ShadowYOffset: Optional[FieldInteger] = None
    TeletextGridControl: Optional[DvbSubDestinationTeletextGridControl] = None
    XPosition: Optional[FieldIntegerMin0] = None
    YPosition: Optional[FieldIntegerMin0] = None


class FailoverConditionSettings(BaseModel):
    AudioSilenceSettings: Optional[AudioSilenceFailoverSettings] = None
    InputLossSettings: Optional[InputLossFailoverSettings] = None
    VideoBlackSettings: Optional[VideoBlackFailoverSettings] = None


class FrameCaptureCdnSettings(BaseModel):
    FrameCaptureS3Settings_1: Optional[FrameCaptureS3Settings] = Field(
        None, alias='FrameCaptureS3Settings'
    )


class FrameCaptureGroupSettings(BaseModel):
    Destination: OutputLocationRef
    FrameCaptureCdnSettings_1: Optional[FrameCaptureCdnSettings] = Field(
        None, alias='FrameCaptureCdnSettings'
    )


class FrameCaptureSettings(BaseModel):
    CaptureInterval: Optional[FieldIntegerMin1Max3600000] = None
    CaptureIntervalUnits: Optional[FrameCaptureIntervalUnit] = None
    TimecodeBurninSettings_1: Optional[TimecodeBurninSettings] = Field(
        None, alias='TimecodeBurninSettings'
    )


class GlobalConfiguration(BaseModel):
    InitialAudioGain: Optional[FieldIntegerMinNegative60Max60] = None
    InputEndAction: Optional[GlobalConfigurationInputEndAction] = None
    InputLossBehavior_1: Optional[InputLossBehavior] = Field(
        None, alias='InputLossBehavior'
    )
    OutputLockingMode: Optional[GlobalConfigurationOutputLockingMode] = None
    OutputTimingSource: Optional[GlobalConfigurationOutputTimingSource] = None
    SupportLowFramerateInputs: Optional[GlobalConfigurationLowFramerateInputs] = None


class H264FilterSettings(BaseModel):
    TemporalFilterSettings_1: Optional[TemporalFilterSettings] = Field(
        None, alias='TemporalFilterSettings'
    )


class H264Settings(BaseModel):
    AdaptiveQuantization: Optional[H264AdaptiveQuantization] = None
    AfdSignaling_1: Optional[AfdSignaling] = Field(None, alias='AfdSignaling')
    Bitrate: Optional[FieldIntegerMin1000] = None
    BufFillPct: Optional[FieldIntegerMin0Max100] = None
    BufSize: Optional[FieldIntegerMin0] = None
    ColorMetadata: Optional[H264ColorMetadata] = None
    ColorSpaceSettings: Optional[H264ColorSpaceSettings] = None
    EntropyEncoding: Optional[H264EntropyEncoding] = None
    FilterSettings: Optional[H264FilterSettings] = None
    FixedAfd_1: Optional[FixedAfd] = Field(None, alias='FixedAfd')
    FlickerAq: Optional[H264FlickerAq] = None
    ForceFieldPictures: Optional[H264ForceFieldPictures] = None
    FramerateControl: Optional[H264FramerateControl] = None
    FramerateDenominator: Optional[FieldIntegerMin1] = None
    FramerateNumerator: Optional[FieldIntegerMin1] = None
    GopBReference: Optional[H264GopBReference] = None
    GopClosedCadence: Optional[FieldIntegerMin0] = None
    GopNumBFrames: Optional[FieldIntegerMin0Max7] = None
    GopSize: Optional[FieldDouble] = None
    GopSizeUnits: Optional[H264GopSizeUnits] = None
    Level: Optional[H264Level] = None
    LookAheadRateControl: Optional[H264LookAheadRateControl] = None
    MaxBitrate: Optional[FieldIntegerMin1000] = None
    MinIInterval: Optional[FieldIntegerMin0Max30] = None
    NumRefFrames: Optional[FieldIntegerMin1Max6] = None
    ParControl: Optional[H264ParControl] = None
    ParDenominator: Optional[FieldIntegerMin1] = None
    ParNumerator: Optional[FieldIntegerMin1] = None
    Profile: Optional[H264Profile] = None
    QualityLevel: Optional[H264QualityLevel] = None
    QvbrQualityLevel: Optional[FieldIntegerMin1Max10] = None
    RateControlMode: Optional[H264RateControlMode] = None
    ScanType: Optional[H264ScanType] = None
    SceneChangeDetect: Optional[H264SceneChangeDetect] = None
    Slices: Optional[FieldIntegerMin1Max32] = None
    Softness: Optional[FieldIntegerMin0Max128] = None
    SpatialAq: Optional[H264SpatialAq] = None
    SubgopLength: Optional[H264SubGopLength] = None
    Syntax: Optional[H264Syntax] = None
    TemporalAq: Optional[H264TemporalAq] = None
    TimecodeBurninSettings_1: Optional[TimecodeBurninSettings] = Field(
        None, alias='TimecodeBurninSettings'
    )
    TimecodeInsertion: Optional[H264TimecodeInsertionBehavior] = None


class H265ColorSpaceSettings(BaseModel):
    ColorSpacePassthroughSettings_1: Optional[ColorSpacePassthroughSettings] = Field(
        None, alias='ColorSpacePassthroughSettings'
    )
    DolbyVision81Settings_1: Optional[DolbyVision81Settings] = Field(
        None, alias='DolbyVision81Settings'
    )
    Hdr10Settings_1: Optional[Hdr10Settings] = Field(None, alias='Hdr10Settings')
    Rec601Settings_1: Optional[Rec601Settings] = Field(None, alias='Rec601Settings')
    Rec709Settings_1: Optional[Rec709Settings] = Field(None, alias='Rec709Settings')


class H265FilterSettings(BaseModel):
    TemporalFilterSettings_1: Optional[TemporalFilterSettings] = Field(
        None, alias='TemporalFilterSettings'
    )


class H265Settings(BaseModel):
    AdaptiveQuantization: Optional[H265AdaptiveQuantization] = None
    AfdSignaling_1: Optional[AfdSignaling] = Field(None, alias='AfdSignaling')
    AlternativeTransferFunction: Optional[H265AlternativeTransferFunction] = None
    Bitrate: Optional[FieldIntegerMin100000Max40000000] = None
    BufSize: Optional[FieldIntegerMin100000Max80000000] = None
    ColorMetadata: Optional[H265ColorMetadata] = None
    ColorSpaceSettings: Optional[H265ColorSpaceSettings] = None
    FilterSettings: Optional[H265FilterSettings] = None
    FixedAfd_1: Optional[FixedAfd] = Field(None, alias='FixedAfd')
    FlickerAq: Optional[H265FlickerAq] = None
    FramerateDenominator: FieldIntegerMin1Max3003
    FramerateNumerator: FieldIntegerMin1
    GopClosedCadence: Optional[FieldIntegerMin0] = None
    GopSize: Optional[FieldDouble] = None
    GopSizeUnits: Optional[H265GopSizeUnits] = None
    Level: Optional[H265Level] = None
    LookAheadRateControl: Optional[H265LookAheadRateControl] = None
    MaxBitrate: Optional[FieldIntegerMin100000Max40000000] = None
    MinIInterval: Optional[FieldIntegerMin0Max30] = None
    ParDenominator: Optional[FieldIntegerMin1] = None
    ParNumerator: Optional[FieldIntegerMin1] = None
    Profile: Optional[H265Profile] = None
    QvbrQualityLevel: Optional[FieldIntegerMin1Max10] = None
    RateControlMode: Optional[H265RateControlMode] = None
    ScanType: Optional[H265ScanType] = None
    SceneChangeDetect: Optional[H265SceneChangeDetect] = None
    Slices: Optional[FieldIntegerMin1Max16] = None
    Tier: Optional[H265Tier] = None
    TimecodeBurninSettings_1: Optional[TimecodeBurninSettings] = Field(
        None, alias='TimecodeBurninSettings'
    )
    TimecodeInsertion: Optional[H265TimecodeInsertionBehavior] = None


class HlsCdnSettings(BaseModel):
    HlsAkamaiSettings_1: Optional[HlsAkamaiSettings] = Field(
        None, alias='HlsAkamaiSettings'
    )
    HlsBasicPutSettings_1: Optional[HlsBasicPutSettings] = Field(
        None, alias='HlsBasicPutSettings'
    )
    HlsMediaStoreSettings_1: Optional[HlsMediaStoreSettings] = Field(
        None, alias='HlsMediaStoreSettings'
    )
    HlsS3Settings_1: Optional[HlsS3Settings] = Field(None, alias='HlsS3Settings')
    HlsWebdavSettings_1: Optional[HlsWebdavSettings] = Field(
        None, alias='HlsWebdavSettings'
    )


class HlsSettings(BaseModel):
    AudioOnlyHlsSettings_1: Optional[AudioOnlyHlsSettings] = Field(
        None, alias='AudioOnlyHlsSettings'
    )
    Fmp4HlsSettings_1: Optional[Fmp4HlsSettings] = Field(None, alias='Fmp4HlsSettings')
    FrameCaptureHlsSettings_1: Optional[FrameCaptureHlsSettings] = Field(
        None, alias='FrameCaptureHlsSettings'
    )
    StandardHlsSettings_1: Optional[StandardHlsSettings] = Field(
        None, alias='StandardHlsSettings'
    )


class InputClippingSettings(BaseModel):
    InputTimecodeSource_1: InputTimecodeSource = Field(..., alias='InputTimecodeSource')
    StartTimecode_1: Optional[StartTimecode] = Field(None, alias='StartTimecode')
    StopTimecode_1: Optional[StopTimecode] = Field(None, alias='StopTimecode')


class InputDestination(BaseModel):
    Ip: Optional[FieldString] = None
    Port: Optional[FieldString] = None
    Url: Optional[FieldString] = None
    Vpc: Optional[InputDestinationVpc] = None


class InputDeviceNetworkSettings(BaseModel):
    DnsAddresses: Optional[FieldListOfString] = None
    Gateway: Optional[FieldString] = None
    IpAddress: Optional[FieldString] = None
    IpScheme: Optional[InputDeviceIpScheme] = None
    SubnetMask: Optional[FieldString] = None


class InputDeviceSummary(BaseModel):
    Arn: Optional[FieldString] = None
    ConnectionState: Optional[InputDeviceConnectionState] = None
    DeviceSettingsSyncState_1: Optional[DeviceSettingsSyncState] = Field(
        None, alias='DeviceSettingsSyncState'
    )
    DeviceUpdateStatus_1: Optional[DeviceUpdateStatus] = Field(
        None, alias='DeviceUpdateStatus'
    )
    HdDeviceSettings: Optional[InputDeviceHdSettings] = None
    Id: Optional[FieldString] = None
    MacAddress: Optional[FieldString] = None
    Name: Optional[FieldString] = None
    NetworkSettings: Optional[InputDeviceNetworkSettings] = None
    SerialNumber: Optional[FieldString] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    Type: Optional[InputDeviceType] = None
    UhdDeviceSettings: Optional[InputDeviceUhdSettings] = None


class InputPrepareScheduleActionSettings(BaseModel):
    InputAttachmentNameReference: Optional[FieldString] = None
    InputClippingSettings_1: Optional[InputClippingSettings] = Field(
        None, alias='InputClippingSettings'
    )
    UrlPath: Optional[FieldListOfString] = None


class InputSecurityGroup(BaseModel):
    Arn: Optional[FieldString] = None
    Id: Optional[FieldString] = None
    Inputs: Optional[FieldListOfString] = None
    State: Optional[InputSecurityGroupState] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    WhitelistRules: Optional[FieldListOfInputWhitelistRule] = None


class InputSwitchScheduleActionSettings(BaseModel):
    InputAttachmentNameReference: FieldString
    InputClippingSettings_1: Optional[InputClippingSettings] = Field(
        None, alias='InputClippingSettings'
    )
    UrlPath: Optional[FieldListOfString] = None


class InputVpcRequest(BaseModel):
    SecurityGroupIds: Optional[FieldListOfString] = None
    SubnetIds: FieldListOfString


class KeyProviderSettings(BaseModel):
    StaticKeySettings_1: Optional[StaticKeySettings] = Field(
        None, alias='StaticKeySettings'
    )


class ListInputDeviceTransfersResponse(BaseModel):
    InputDeviceTransfers: Optional[FieldListOfTransferringInputDeviceSummary] = None
    NextToken: Optional[FieldString] = None


class ListMultiplexProgramsResponse(BaseModel):
    MultiplexPrograms: Optional[FieldListOfMultiplexProgramSummary] = None
    NextToken: Optional[FieldString] = None


class ListTagsForResourceResponse(BaseModel):
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class MediaPackageGroupSettings(BaseModel):
    Destination: OutputLocationRef


class Mpeg2FilterSettings(BaseModel):
    TemporalFilterSettings_1: Optional[TemporalFilterSettings] = Field(
        None, alias='TemporalFilterSettings'
    )


class Mpeg2Settings(BaseModel):
    AdaptiveQuantization: Optional[Mpeg2AdaptiveQuantization] = None
    AfdSignaling_1: Optional[AfdSignaling] = Field(None, alias='AfdSignaling')
    ColorMetadata: Optional[Mpeg2ColorMetadata] = None
    ColorSpace: Optional[Mpeg2ColorSpace] = None
    DisplayAspectRatio: Optional[Mpeg2DisplayRatio] = None
    FilterSettings: Optional[Mpeg2FilterSettings] = None
    FixedAfd_1: Optional[FixedAfd] = Field(None, alias='FixedAfd')
    FramerateDenominator: FieldIntegerMin1
    FramerateNumerator: FieldIntegerMin1
    GopClosedCadence: Optional[FieldIntegerMin0] = None
    GopNumBFrames: Optional[FieldIntegerMin0Max7] = None
    GopSize: Optional[FieldDouble] = None
    GopSizeUnits: Optional[Mpeg2GopSizeUnits] = None
    ScanType: Optional[Mpeg2ScanType] = None
    SubgopLength: Optional[Mpeg2SubGopLength] = None
    TimecodeBurninSettings_1: Optional[TimecodeBurninSettings] = Field(
        None, alias='TimecodeBurninSettings'
    )
    TimecodeInsertion: Optional[Mpeg2TimecodeInsertionBehavior] = None


class MsSmoothGroupSettings(BaseModel):
    AcquisitionPointId: Optional[FieldString] = None
    AudioOnlyTimecodeControl: Optional[SmoothGroupAudioOnlyTimecodeControl] = None
    CertificateMode: Optional[SmoothGroupCertificateMode] = None
    ConnectionRetryInterval: Optional[FieldIntegerMin0] = None
    Destination: OutputLocationRef
    EventId: Optional[FieldString] = None
    EventIdMode: Optional[SmoothGroupEventIdMode] = None
    EventStopBehavior: Optional[SmoothGroupEventStopBehavior] = None
    FilecacheDuration: Optional[FieldIntegerMin0] = None
    FragmentLength: Optional[FieldIntegerMin1] = None
    InputLossAction: Optional[InputLossActionForMsSmoothOut] = None
    NumRetries: Optional[FieldIntegerMin0] = None
    RestartDelay: Optional[FieldIntegerMin0] = None
    SegmentationMode: Optional[SmoothGroupSegmentationMode] = None
    SendDelayMs: Optional[FieldIntegerMin0Max10000] = None
    SparseTrackType: Optional[SmoothGroupSparseTrackType] = None
    StreamManifestBehavior: Optional[SmoothGroupStreamManifestBehavior] = None
    TimestampOffset: Optional[FieldString] = None
    TimestampOffsetMode: Optional[SmoothGroupTimestampOffsetMode] = None


class Multiplex(BaseModel):
    Arn: Optional[FieldString] = None
    AvailabilityZones: Optional[FieldListOfString] = None
    Destinations: Optional[FieldListOfMultiplexOutputDestination] = None
    Id: Optional[FieldString] = None
    MultiplexSettings_1: Optional[MultiplexSettings] = Field(
        None, alias='MultiplexSettings'
    )
    Name: Optional[FieldString] = None
    PipelinesRunningCount: Optional[FieldInteger] = None
    ProgramCount: Optional[FieldInteger] = None
    State: Optional[MultiplexState] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class MultiplexOutputSettings(BaseModel):
    Destination: OutputLocationRef


class MultiplexProgramSettings(BaseModel):
    PreferredChannelPipeline_1: Optional[PreferredChannelPipeline] = Field(
        None, alias='PreferredChannelPipeline'
    )
    ProgramNumber: FieldIntegerMin0Max65535
    ServiceDescriptor: Optional[MultiplexProgramServiceDescriptor] = None
    VideoSettings: Optional[MultiplexVideoSettings] = None


class MultiplexSummary(BaseModel):
    Arn: Optional[FieldString] = None
    AvailabilityZones: Optional[FieldListOfString] = None
    Id: Optional[FieldString] = None
    MultiplexSettings: Optional[MultiplexSettingsSummary] = None
    Name: Optional[FieldString] = None
    PipelinesRunningCount: Optional[FieldInteger] = None
    ProgramCount: Optional[FieldInteger] = None
    State: Optional[MultiplexState] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class Offering(BaseModel):
    Arn: Optional[FieldString] = None
    CurrencyCode: Optional[FieldString] = None
    Duration: Optional[FieldInteger] = None
    DurationUnits: Optional[OfferingDurationUnits] = None
    FixedPrice: Optional[FieldDouble] = None
    OfferingDescription: Optional[FieldString] = None
    OfferingId: Optional[FieldString] = None
    OfferingType_1: Optional[OfferingType] = Field(None, alias='OfferingType')
    Region: Optional[FieldString] = None
    ResourceSpecification: Optional[ReservationResourceSpecification] = None
    UsagePrice: Optional[FieldDouble] = None


class OutputDestination(BaseModel):
    Id: Optional[FieldString] = None
    MediaPackageSettings: Optional[FieldListOfMediaPackageOutputDestinationSettings] = (
        None
    )
    MultiplexSettings: Optional[MultiplexProgramChannelDestinationSettings] = None
    Settings: Optional[FieldListOfOutputDestinationSettings] = None


class PurchaseOfferingRequest(BaseModel):
    Count: FieldIntegerMin1
    Name: Optional[FieldString] = None
    RenewalSettings_1: Optional[RenewalSettings] = Field(None, alias='RenewalSettings')
    RequestId: Optional[FieldString] = None
    Start: Optional[FieldString] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class Reservation(BaseModel):
    Arn: Optional[FieldString] = None
    Count: Optional[FieldInteger] = None
    CurrencyCode: Optional[FieldString] = None
    Duration: Optional[FieldInteger] = None
    DurationUnits: Optional[OfferingDurationUnits] = None
    End: Optional[FieldString] = None
    FixedPrice: Optional[FieldDouble] = None
    Name: Optional[FieldString] = None
    OfferingDescription: Optional[FieldString] = None
    OfferingId: Optional[FieldString] = None
    OfferingType_1: Optional[OfferingType] = Field(None, alias='OfferingType')
    Region: Optional[FieldString] = None
    RenewalSettings_1: Optional[RenewalSettings] = Field(None, alias='RenewalSettings')
    ReservationId: Optional[FieldString] = None
    ResourceSpecification: Optional[ReservationResourceSpecification] = None
    Start: Optional[FieldString] = None
    State: Optional[ReservationState] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    UsagePrice: Optional[FieldDouble] = None


class Scte35DescriptorSettings(BaseModel):
    SegmentationDescriptorScte35DescriptorSettings: Scte35SegmentationDescriptor


class StartMultiplexResponse(BaseModel):
    Arn: Optional[FieldString] = None
    AvailabilityZones: Optional[FieldListOfString] = None
    Destinations: Optional[FieldListOfMultiplexOutputDestination] = None
    Id: Optional[FieldString] = None
    MultiplexSettings_1: Optional[MultiplexSettings] = Field(
        None, alias='MultiplexSettings'
    )
    Name: Optional[FieldString] = None
    PipelinesRunningCount: Optional[FieldInteger] = None
    ProgramCount: Optional[FieldInteger] = None
    State: Optional[MultiplexState] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class StopMultiplexResponse(BaseModel):
    Arn: Optional[FieldString] = None
    AvailabilityZones: Optional[FieldListOfString] = None
    Destinations: Optional[FieldListOfMultiplexOutputDestination] = None
    Id: Optional[FieldString] = None
    MultiplexSettings_1: Optional[MultiplexSettings] = Field(
        None, alias='MultiplexSettings'
    )
    Name: Optional[FieldString] = None
    PipelinesRunningCount: Optional[FieldInteger] = None
    ProgramCount: Optional[FieldInteger] = None
    State: Optional[MultiplexState] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class UpdateInputDeviceResponse(BaseModel):
    Arn: Optional[FieldString] = None
    ConnectionState: Optional[InputDeviceConnectionState] = None
    DeviceSettingsSyncState_1: Optional[DeviceSettingsSyncState] = Field(
        None, alias='DeviceSettingsSyncState'
    )
    DeviceUpdateStatus_1: Optional[DeviceUpdateStatus] = Field(
        None, alias='DeviceUpdateStatus'
    )
    HdDeviceSettings: Optional[InputDeviceHdSettings] = None
    Id: Optional[FieldString] = None
    MacAddress: Optional[FieldString] = None
    Name: Optional[FieldString] = None
    NetworkSettings: Optional[InputDeviceNetworkSettings] = None
    SerialNumber: Optional[FieldString] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    Type: Optional[InputDeviceType] = None
    UhdDeviceSettings: Optional[InputDeviceUhdSettings] = None


class UpdateInputRequest(BaseModel):
    Destinations: Optional[FieldListOfInputDestinationRequest] = None
    InputDevices: Optional[FieldListOfInputDeviceRequest] = None
    InputSecurityGroups: Optional[FieldListOfString] = None
    MediaConnectFlows: Optional[FieldListOfMediaConnectFlowRequest] = None
    Name: Optional[FieldString] = None
    RoleArn: Optional[FieldString] = None
    Sources: Optional[FieldListOfInputSourceRequest] = None


class UpdateInputSecurityGroupRequest(BaseModel):
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    WhitelistRules: Optional[FieldListOfInputWhitelistRuleCidr] = None


class UpdateInputSecurityGroupResponse(BaseModel):
    SecurityGroup: Optional[InputSecurityGroup] = None


class UpdateMultiplexProgramRequest(BaseModel):
    MultiplexProgramSettings_1: Optional[MultiplexProgramSettings] = Field(
        None, alias='MultiplexProgramSettings'
    )


class UpdateMultiplexResponse(BaseModel):
    Multiplex_1: Optional[Multiplex] = Field(None, alias='Multiplex')


class UpdateReservationResponse(BaseModel):
    Reservation_1: Optional[Reservation] = Field(None, alias='Reservation')


class VideoCodecSettings(BaseModel):
    FrameCaptureSettings_1: Optional[FrameCaptureSettings] = Field(
        None, alias='FrameCaptureSettings'
    )
    H264Settings_1: Optional[H264Settings] = Field(None, alias='H264Settings')
    H265Settings_1: Optional[H265Settings] = Field(None, alias='H265Settings')
    Mpeg2Settings_1: Optional[Mpeg2Settings] = Field(None, alias='Mpeg2Settings')


class VideoDescription(BaseModel):
    CodecSettings: Optional[VideoCodecSettings] = None
    Height: Optional[FieldInteger] = None
    Name: FieldString
    RespondToAfd: Optional[VideoDescriptionRespondToAfd] = None
    ScalingBehavior: Optional[VideoDescriptionScalingBehavior] = None
    Sharpness: Optional[FieldIntegerMin0Max100] = None
    Width: Optional[FieldInteger] = None


class VideoSelector(BaseModel):
    ColorSpace: Optional[VideoSelectorColorSpace] = None
    ColorSpaceSettings: Optional[VideoSelectorColorSpaceSettings] = None
    ColorSpaceUsage: Optional[VideoSelectorColorSpaceUsage] = None
    SelectorSettings: Optional[VideoSelectorSettings] = None


class VpcOutputSettings(BaseModel):
    PublicAddressAllocationIds: Optional[FieldListOfString] = None
    SecurityGroupIds: Optional[FieldListOfString] = None
    SubnetIds: FieldListOfString


class VpcOutputSettingsDescription(BaseModel):
    AvailabilityZones: Optional[FieldListOfString] = None
    NetworkInterfaceIds: Optional[FieldListOfString] = None
    SecurityGroupIds: Optional[FieldListOfString] = None
    SubnetIds: Optional[FieldListOfString] = None


class FieldListOfAudioChannelMapping(RootModel[List[AudioChannelMapping]]):
    root: List[AudioChannelMapping] = Field(
        ..., description='Placeholder documentation for __listOfAudioChannelMapping'
    )


class FieldListOfInputDestination(RootModel[List[InputDestination]]):
    root: List[InputDestination] = Field(
        ..., description='Placeholder documentation for __listOfInputDestination'
    )


class FieldListOfInputDeviceSummary(RootModel[List[InputDeviceSummary]]):
    root: List[InputDeviceSummary] = Field(
        ..., description='Placeholder documentation for __listOfInputDeviceSummary'
    )


class FieldListOfInputSecurityGroup(RootModel[List[InputSecurityGroup]]):
    root: List[InputSecurityGroup] = Field(
        ..., description='Placeholder documentation for __listOfInputSecurityGroup'
    )


class FieldListOfMultiplexSummary(RootModel[List[MultiplexSummary]]):
    root: List[MultiplexSummary] = Field(
        ..., description='Placeholder documentation for __listOfMultiplexSummary'
    )


class FieldListOfOffering(RootModel[List[Offering]]):
    root: List[Offering] = Field(
        ..., description='Placeholder documentation for __listOfOffering'
    )


class FieldListOfOutputDestination(RootModel[List[OutputDestination]]):
    root: List[OutputDestination] = Field(
        ..., description='Placeholder documentation for __listOfOutputDestination'
    )


class FieldListOfReservation(RootModel[List[Reservation]]):
    root: List[Reservation] = Field(
        ..., description='Placeholder documentation for __listOfReservation'
    )


class FieldListOfVideoDescription(RootModel[List[VideoDescription]]):
    root: List[VideoDescription] = Field(
        ..., description='Placeholder documentation for __listOfVideoDescription'
    )


class ProdChannelsChannelIdChannelClassPutRequest(BaseModel):
    channelClass: ChannelClass = Field(
        ...,
        description='A standard channel has two encoding pipelines and a single pipeline channel only has one.',
    )
    destinations: Optional[List[OutputDestination]] = Field(
        None, description='Placeholder documentation for __listOfOutputDestination'
    )


class AudioSelectorSettings(BaseModel):
    AudioHlsRenditionSelection_1: Optional[AudioHlsRenditionSelection] = Field(
        None, alias='AudioHlsRenditionSelection'
    )
    AudioLanguageSelection_1: Optional[AudioLanguageSelection] = Field(
        None, alias='AudioLanguageSelection'
    )
    AudioPidSelection_1: Optional[AudioPidSelection] = Field(
        None, alias='AudioPidSelection'
    )
    AudioTrackSelection_1: Optional[AudioTrackSelection] = Field(
        None, alias='AudioTrackSelection'
    )


class AvailConfiguration(BaseModel):
    AvailSettings_1: Optional[AvailSettings] = Field(None, alias='AvailSettings')


class CaptionDestinationSettings(BaseModel):
    AribDestinationSettings_1: Optional[AribDestinationSettings] = Field(
        None, alias='AribDestinationSettings'
    )
    BurnInDestinationSettings_1: Optional[BurnInDestinationSettings] = Field(
        None, alias='BurnInDestinationSettings'
    )
    DvbSubDestinationSettings_1: Optional[DvbSubDestinationSettings] = Field(
        None, alias='DvbSubDestinationSettings'
    )
    EbuTtDDestinationSettings_1: Optional[EbuTtDDestinationSettings] = Field(
        None, alias='EbuTtDDestinationSettings'
    )
    EmbeddedDestinationSettings_1: Optional[EmbeddedDestinationSettings] = Field(
        None, alias='EmbeddedDestinationSettings'
    )
    EmbeddedPlusScte20DestinationSettings_1: Optional[
        EmbeddedPlusScte20DestinationSettings
    ] = Field(None, alias='EmbeddedPlusScte20DestinationSettings')
    RtmpCaptionInfoDestinationSettings_1: Optional[
        RtmpCaptionInfoDestinationSettings
    ] = Field(None, alias='RtmpCaptionInfoDestinationSettings')
    Scte20PlusEmbeddedDestinationSettings_1: Optional[
        Scte20PlusEmbeddedDestinationSettings
    ] = Field(None, alias='Scte20PlusEmbeddedDestinationSettings')
    Scte27DestinationSettings_1: Optional[Scte27DestinationSettings] = Field(
        None, alias='Scte27DestinationSettings'
    )
    SmpteTtDestinationSettings_1: Optional[SmpteTtDestinationSettings] = Field(
        None, alias='SmpteTtDestinationSettings'
    )
    TeletextDestinationSettings_1: Optional[TeletextDestinationSettings] = Field(
        None, alias='TeletextDestinationSettings'
    )
    TtmlDestinationSettings_1: Optional[TtmlDestinationSettings] = Field(
        None, alias='TtmlDestinationSettings'
    )
    WebvttDestinationSettings_1: Optional[WebvttDestinationSettings] = Field(
        None, alias='WebvttDestinationSettings'
    )


class CaptionSelector(BaseModel):
    LanguageCode: Optional[FieldString] = None
    Name: FieldStringMin1
    SelectorSettings: Optional[CaptionSelectorSettings] = None


class CreateInputRequest(BaseModel):
    Destinations: Optional[FieldListOfInputDestinationRequest] = None
    InputDevices: Optional[FieldListOfInputDeviceSettings] = None
    InputSecurityGroups: Optional[FieldListOfString] = None
    MediaConnectFlows: Optional[FieldListOfMediaConnectFlowRequest] = None
    Name: Optional[FieldString] = None
    RequestId: Optional[FieldString] = None
    RoleArn: Optional[FieldString] = None
    Sources: Optional[FieldListOfInputSourceRequest] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    Type: Optional[InputType] = None
    Vpc: Optional[InputVpcRequest] = None


class CreateInputSecurityGroupResponse(BaseModel):
    SecurityGroup: Optional[InputSecurityGroup] = None


class CreateMultiplexProgramRequest(BaseModel):
    MultiplexProgramSettings_1: MultiplexProgramSettings = Field(
        ..., alias='MultiplexProgramSettings'
    )
    ProgramName: FieldString
    RequestId: FieldString


class CreateMultiplexResponse(BaseModel):
    Multiplex_1: Optional[Multiplex] = Field(None, alias='Multiplex')


class DeleteMultiplexProgramResponse(BaseModel):
    ChannelId: Optional[FieldString] = None
    MultiplexProgramSettings_1: Optional[MultiplexProgramSettings] = Field(
        None, alias='MultiplexProgramSettings'
    )
    PacketIdentifiersMap: Optional[MultiplexProgramPacketIdentifiersMap] = None
    PipelineDetails: Optional[FieldListOfMultiplexProgramPipelineDetail] = None
    ProgramName: Optional[FieldString] = None


class DescribeInputDeviceResponse(BaseModel):
    Arn: Optional[FieldString] = None
    ConnectionState: Optional[InputDeviceConnectionState] = None
    DeviceSettingsSyncState_1: Optional[DeviceSettingsSyncState] = Field(
        None, alias='DeviceSettingsSyncState'
    )
    DeviceUpdateStatus_1: Optional[DeviceUpdateStatus] = Field(
        None, alias='DeviceUpdateStatus'
    )
    HdDeviceSettings: Optional[InputDeviceHdSettings] = None
    Id: Optional[FieldString] = None
    MacAddress: Optional[FieldString] = None
    Name: Optional[FieldString] = None
    NetworkSettings: Optional[InputDeviceNetworkSettings] = None
    SerialNumber: Optional[FieldString] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    Type: Optional[InputDeviceType] = None
    UhdDeviceSettings: Optional[InputDeviceUhdSettings] = None


class DescribeInputResponse(BaseModel):
    Arn: Optional[FieldString] = None
    AttachedChannels: Optional[FieldListOfString] = None
    Destinations: Optional[FieldListOfInputDestination] = None
    Id: Optional[FieldString] = None
    InputClass_1: Optional[InputClass] = Field(None, alias='InputClass')
    InputDevices: Optional[FieldListOfInputDeviceSettings] = None
    InputPartnerIds: Optional[FieldListOfString] = None
    InputSourceType_1: Optional[InputSourceType] = Field(None, alias='InputSourceType')
    MediaConnectFlows: Optional[FieldListOfMediaConnectFlow] = None
    Name: Optional[FieldString] = None
    RoleArn: Optional[FieldString] = None
    SecurityGroups: Optional[FieldListOfString] = None
    Sources: Optional[FieldListOfInputSource] = None
    State: Optional[InputState] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    Type: Optional[InputType] = None


class DescribeMultiplexProgramResponse(BaseModel):
    ChannelId: Optional[FieldString] = None
    MultiplexProgramSettings_1: Optional[MultiplexProgramSettings] = Field(
        None, alias='MultiplexProgramSettings'
    )
    PacketIdentifiersMap: Optional[MultiplexProgramPacketIdentifiersMap] = None
    PipelineDetails: Optional[FieldListOfMultiplexProgramPipelineDetail] = None
    ProgramName: Optional[FieldString] = None


class FailoverCondition(BaseModel):
    FailoverConditionSettings_1: Optional[FailoverConditionSettings] = Field(
        None, alias='FailoverConditionSettings'
    )


class HlsGroupSettings(BaseModel):
    AdMarkers: Optional[FieldListOfHlsAdMarkers] = None
    BaseUrlContent: Optional[FieldString] = None
    BaseUrlContent1: Optional[FieldString] = None
    BaseUrlManifest: Optional[FieldString] = None
    BaseUrlManifest1: Optional[FieldString] = None
    CaptionLanguageMappings: Optional[FieldListOfCaptionLanguageMapping] = None
    CaptionLanguageSetting: Optional[HlsCaptionLanguageSetting] = None
    ClientCache: Optional[HlsClientCache] = None
    CodecSpecification: Optional[HlsCodecSpecification] = None
    ConstantIv: Optional[FieldStringMin32Max32] = None
    Destination: OutputLocationRef
    DirectoryStructure: Optional[HlsDirectoryStructure] = None
    DiscontinuityTags: Optional[HlsDiscontinuityTags] = None
    EncryptionType: Optional[HlsEncryptionType] = None
    HlsCdnSettings_1: Optional[HlsCdnSettings] = Field(None, alias='HlsCdnSettings')
    HlsId3SegmentTagging: Optional[HlsId3SegmentTaggingState] = None
    IFrameOnlyPlaylists: Optional[IFrameOnlyPlaylistType] = None
    IncompleteSegmentBehavior: Optional[HlsIncompleteSegmentBehavior] = None
    IndexNSegments: Optional[FieldIntegerMin3] = None
    InputLossAction: Optional[InputLossActionForHlsOut] = None
    IvInManifest: Optional[HlsIvInManifest] = None
    IvSource: Optional[HlsIvSource] = None
    KeepSegments: Optional[FieldIntegerMin1] = None
    KeyFormat: Optional[FieldString] = None
    KeyFormatVersions: Optional[FieldString] = None
    KeyProviderSettings_1: Optional[KeyProviderSettings] = Field(
        None, alias='KeyProviderSettings'
    )
    ManifestCompression: Optional[HlsManifestCompression] = None
    ManifestDurationFormat: Optional[HlsManifestDurationFormat] = None
    MinSegmentLength: Optional[FieldIntegerMin0] = None
    Mode: Optional[HlsMode] = None
    OutputSelection: Optional[HlsOutputSelection] = None
    ProgramDateTime: Optional[HlsProgramDateTime] = None
    ProgramDateTimeClock: Optional[HlsProgramDateTimeClock] = None
    ProgramDateTimePeriod: Optional[FieldIntegerMin0Max3600] = None
    RedundantManifest: Optional[HlsRedundantManifest] = None
    SegmentLength: Optional[FieldIntegerMin1] = None
    SegmentationMode: Optional[HlsSegmentationMode] = None
    SegmentsPerSubdirectory: Optional[FieldIntegerMin1] = None
    StreamInfResolution: Optional[HlsStreamInfResolution] = None
    TimedMetadataId3Frame: Optional[HlsTimedMetadataId3Frame] = None
    TimedMetadataId3Period: Optional[FieldIntegerMin0] = None
    TimestampDeltaMilliseconds: Optional[FieldIntegerMin0] = None
    TsFileMode: Optional[HlsTsFileMode] = None


class HlsOutputSettings(BaseModel):
    H265PackagingType: Optional[HlsH265PackagingType] = None
    HlsSettings_1: HlsSettings = Field(..., alias='HlsSettings')
    NameModifier: Optional[FieldStringMin1] = None
    SegmentModifier: Optional[FieldString] = None


class Input(BaseModel):
    Arn: Optional[FieldString] = None
    AttachedChannels: Optional[FieldListOfString] = None
    Destinations: Optional[FieldListOfInputDestination] = None
    Id: Optional[FieldString] = None
    InputClass_1: Optional[InputClass] = Field(None, alias='InputClass')
    InputDevices: Optional[FieldListOfInputDeviceSettings] = None
    InputPartnerIds: Optional[FieldListOfString] = None
    InputSourceType_1: Optional[InputSourceType] = Field(None, alias='InputSourceType')
    MediaConnectFlows: Optional[FieldListOfMediaConnectFlow] = None
    Name: Optional[FieldString] = None
    RoleArn: Optional[FieldString] = None
    SecurityGroups: Optional[FieldListOfString] = None
    Sources: Optional[FieldListOfInputSource] = None
    State: Optional[InputState] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    Type: Optional[InputType] = None


class ListInputDevicesResponse(BaseModel):
    InputDevices: Optional[FieldListOfInputDeviceSummary] = None
    NextToken: Optional[FieldString] = None


class ListInputSecurityGroupsResponse(BaseModel):
    InputSecurityGroups: Optional[FieldListOfInputSecurityGroup] = None
    NextToken: Optional[FieldString] = None


class ListMultiplexesResponse(BaseModel):
    Multiplexes: Optional[FieldListOfMultiplexSummary] = None
    NextToken: Optional[FieldString] = None


class ListOfferingsResponse(BaseModel):
    NextToken: Optional[FieldString] = None
    Offerings: Optional[FieldListOfOffering] = None


class ListReservationsResponse(BaseModel):
    NextToken: Optional[FieldString] = None
    Reservations: Optional[FieldListOfReservation] = None


class MultiplexProgram(BaseModel):
    ChannelId: Optional[FieldString] = None
    MultiplexProgramSettings_1: Optional[MultiplexProgramSettings] = Field(
        None, alias='MultiplexProgramSettings'
    )
    PacketIdentifiersMap: Optional[MultiplexProgramPacketIdentifiersMap] = None
    PipelineDetails: Optional[FieldListOfMultiplexProgramPipelineDetail] = None
    ProgramName: Optional[FieldString] = None


class OutputGroupSettings(BaseModel):
    ArchiveGroupSettings_1: Optional[ArchiveGroupSettings] = Field(
        None, alias='ArchiveGroupSettings'
    )
    FrameCaptureGroupSettings_1: Optional[FrameCaptureGroupSettings] = Field(
        None, alias='FrameCaptureGroupSettings'
    )
    HlsGroupSettings_1: Optional[HlsGroupSettings] = Field(
        None, alias='HlsGroupSettings'
    )
    MediaPackageGroupSettings_1: Optional[MediaPackageGroupSettings] = Field(
        None, alias='MediaPackageGroupSettings'
    )
    MsSmoothGroupSettings_1: Optional[MsSmoothGroupSettings] = Field(
        None, alias='MsSmoothGroupSettings'
    )
    MultiplexGroupSettings_1: Optional[MultiplexGroupSettings] = Field(
        None, alias='MultiplexGroupSettings'
    )
    RtmpGroupSettings_1: Optional[RtmpGroupSettings] = Field(
        None, alias='RtmpGroupSettings'
    )
    UdpGroupSettings_1: Optional[UdpGroupSettings] = Field(
        None, alias='UdpGroupSettings'
    )


class OutputSettings(BaseModel):
    ArchiveOutputSettings_1: Optional[ArchiveOutputSettings] = Field(
        None, alias='ArchiveOutputSettings'
    )
    FrameCaptureOutputSettings_1: Optional[FrameCaptureOutputSettings] = Field(
        None, alias='FrameCaptureOutputSettings'
    )
    HlsOutputSettings_1: Optional[HlsOutputSettings] = Field(
        None, alias='HlsOutputSettings'
    )
    MediaPackageOutputSettings_1: Optional[MediaPackageOutputSettings] = Field(
        None, alias='MediaPackageOutputSettings'
    )
    MsSmoothOutputSettings_1: Optional[MsSmoothOutputSettings] = Field(
        None, alias='MsSmoothOutputSettings'
    )
    MultiplexOutputSettings_1: Optional[MultiplexOutputSettings] = Field(
        None, alias='MultiplexOutputSettings'
    )
    RtmpOutputSettings_1: Optional[RtmpOutputSettings] = Field(
        None, alias='RtmpOutputSettings'
    )
    UdpOutputSettings_1: Optional[UdpOutputSettings] = Field(
        None, alias='UdpOutputSettings'
    )


class PurchaseOfferingResponse(BaseModel):
    Reservation_1: Optional[Reservation] = Field(None, alias='Reservation')


class RemixSettings(BaseModel):
    ChannelMappings: FieldListOfAudioChannelMapping
    ChannelsIn: Optional[FieldIntegerMin1Max16] = None
    ChannelsOut: Optional[FieldIntegerMin1Max8] = None


class Scte35Descriptor(BaseModel):
    Scte35DescriptorSettings_1: Scte35DescriptorSettings = Field(
        ..., alias='Scte35DescriptorSettings'
    )


class UpdateChannelClassRequest(BaseModel):
    ChannelClass_1: ChannelClass = Field(..., alias='ChannelClass')
    Destinations: Optional[FieldListOfOutputDestination] = None


class UpdateInputResponse(BaseModel):
    Input_1: Optional[Input] = Field(None, alias='Input')


class UpdateMultiplexProgramResponse(BaseModel):
    MultiplexProgram_1: Optional[MultiplexProgram] = Field(
        None, alias='MultiplexProgram'
    )


class FieldListOfCaptionSelector(RootModel[List[CaptionSelector]]):
    root: List[CaptionSelector] = Field(
        ..., description='Placeholder documentation for __listOfCaptionSelector'
    )


class FieldListOfFailoverCondition(RootModel[List[FailoverCondition]]):
    root: List[FailoverCondition] = Field(
        ..., description='Placeholder documentation for __listOfFailoverCondition'
    )


class FieldListOfInput(RootModel[List[Input]]):
    root: List[Input] = Field(
        ..., description='Placeholder documentation for __listOfInput'
    )


class FieldListOfScte35Descriptor(RootModel[List[Scte35Descriptor]]):
    root: List[Scte35Descriptor] = Field(
        ..., description='Placeholder documentation for __listOfScte35Descriptor'
    )


class AudioDescription(BaseModel):
    AudioNormalizationSettings_1: Optional[AudioNormalizationSettings] = Field(
        None, alias='AudioNormalizationSettings'
    )
    AudioSelectorName: FieldString
    AudioType_1: Optional[AudioType] = Field(None, alias='AudioType')
    AudioTypeControl: Optional[AudioDescriptionAudioTypeControl] = None
    AudioWatermarkingSettings: Optional[AudioWatermarkSettings] = None
    CodecSettings: Optional[AudioCodecSettings] = None
    LanguageCode: Optional[FieldStringMin1Max35] = None
    LanguageCodeControl: Optional[AudioDescriptionLanguageCodeControl] = None
    Name: FieldStringMax255
    RemixSettings_1: Optional[RemixSettings] = Field(None, alias='RemixSettings')
    StreamName: Optional[FieldString] = None


class AudioSelector(BaseModel):
    Name: FieldStringMin1
    SelectorSettings: Optional[AudioSelectorSettings] = None


class AutomaticInputFailoverSettings(BaseModel):
    ErrorClearTimeMsec: Optional[FieldIntegerMin1] = None
    FailoverConditions: Optional[FieldListOfFailoverCondition] = None
    InputPreference_1: Optional[InputPreference] = Field(None, alias='InputPreference')
    SecondaryInputId: FieldString


class CaptionDescription(BaseModel):
    Accessibility: Optional[AccessibilityType] = None
    CaptionSelectorName: FieldString
    DestinationSettings: Optional[CaptionDestinationSettings] = None
    LanguageCode: Optional[FieldString] = None
    LanguageDescription: Optional[FieldString] = None
    Name: FieldString


class CreateInputResponse(BaseModel):
    Input_1: Optional[Input] = Field(None, alias='Input')


class CreateMultiplexProgramResponse(BaseModel):
    MultiplexProgram_1: Optional[MultiplexProgram] = Field(
        None, alias='MultiplexProgram'
    )


class CreatePartnerInputResponse(BaseModel):
    Input_1: Optional[Input] = Field(None, alias='Input')


class ListInputsResponse(BaseModel):
    Inputs: Optional[FieldListOfInput] = None
    NextToken: Optional[FieldString] = None


class Output(BaseModel):
    AudioDescriptionNames: Optional[FieldListOfString] = None
    CaptionDescriptionNames: Optional[FieldListOfString] = None
    OutputName: Optional[FieldStringMin1Max255] = None
    OutputSettings_1: OutputSettings = Field(..., alias='OutputSettings')
    VideoDescriptionName: Optional[FieldString] = None


class Scte35TimeSignalScheduleActionSettings(BaseModel):
    Scte35Descriptors: FieldListOfScte35Descriptor


class FieldListOfAudioDescription(RootModel[List[AudioDescription]]):
    root: List[AudioDescription] = Field(
        ..., description='Placeholder documentation for __listOfAudioDescription'
    )


class FieldListOfAudioSelector(RootModel[List[AudioSelector]]):
    root: List[AudioSelector] = Field(
        ..., description='Placeholder documentation for __listOfAudioSelector'
    )


class FieldListOfCaptionDescription(RootModel[List[CaptionDescription]]):
    root: List[CaptionDescription] = Field(
        ..., description='Placeholder documentation for __listOfCaptionDescription'
    )


class FieldListOfOutput(RootModel[List[Output]]):
    root: List[Output] = Field(
        ..., description='Placeholder documentation for __listOfOutput'
    )


class InputSettings(BaseModel):
    AudioSelectors: Optional[FieldListOfAudioSelector] = None
    CaptionSelectors: Optional[FieldListOfCaptionSelector] = None
    DeblockFilter: Optional[InputDeblockFilter] = None
    DenoiseFilter: Optional[InputDenoiseFilter] = None
    FilterStrength: Optional[FieldIntegerMin1Max5] = None
    InputFilter_1: Optional[InputFilter] = Field(None, alias='InputFilter')
    NetworkInputSettings_1: Optional[NetworkInputSettings] = Field(
        None, alias='NetworkInputSettings'
    )
    Scte35Pid: Optional[FieldIntegerMin32Max8191] = None
    Smpte2038DataPreference_1: Optional[Smpte2038DataPreference] = Field(
        None, alias='Smpte2038DataPreference'
    )
    SourceEndBehavior: Optional[InputSourceEndBehavior] = None
    VideoSelector_1: Optional[VideoSelector] = Field(None, alias='VideoSelector')


class OutputGroup(BaseModel):
    Name: Optional[FieldStringMax32] = None
    OutputGroupSettings_1: OutputGroupSettings = Field(..., alias='OutputGroupSettings')
    Outputs: FieldListOfOutput


class ScheduleActionSettings(BaseModel):
    HlsId3SegmentTaggingSettings: Optional[
        HlsId3SegmentTaggingScheduleActionSettings
    ] = None
    HlsTimedMetadataSettings: Optional[HlsTimedMetadataScheduleActionSettings] = None
    InputPrepareSettings: Optional[InputPrepareScheduleActionSettings] = None
    InputSwitchSettings: Optional[InputSwitchScheduleActionSettings] = None
    MotionGraphicsImageActivateSettings: Optional[
        MotionGraphicsActivateScheduleActionSettings
    ] = None
    MotionGraphicsImageDeactivateSettings: Optional[
        MotionGraphicsDeactivateScheduleActionSettings
    ] = None
    PauseStateSettings: Optional[PauseStateScheduleActionSettings] = None
    Scte35InputSettings: Optional[Scte35InputScheduleActionSettings] = None
    Scte35ReturnToNetworkSettings: Optional[
        Scte35ReturnToNetworkScheduleActionSettings
    ] = None
    Scte35SpliceInsertSettings: Optional[Scte35SpliceInsertScheduleActionSettings] = (
        None
    )
    Scte35TimeSignalSettings: Optional[Scte35TimeSignalScheduleActionSettings] = None
    StaticImageActivateSettings: Optional[StaticImageActivateScheduleActionSettings] = (
        None
    )
    StaticImageDeactivateSettings: Optional[
        StaticImageDeactivateScheduleActionSettings
    ] = None


class FieldListOfOutputGroup(RootModel[List[OutputGroup]]):
    root: List[OutputGroup] = Field(
        ..., description='Placeholder documentation for __listOfOutputGroup'
    )


class EncoderSettings1(BaseModel):
    AudioDescriptions: Optional[FieldListOfAudioDescription] = None
    AvailBlanking_1: Optional[AvailBlanking] = Field(None, alias='AvailBlanking')
    AvailConfiguration_1: Optional[AvailConfiguration] = Field(
        None, alias='AvailConfiguration'
    )
    BlackoutSlate_1: Optional[BlackoutSlate] = Field(None, alias='BlackoutSlate')
    CaptionDescriptions: Optional[FieldListOfCaptionDescription] = None
    FeatureActivations_1: Optional[FeatureActivations] = Field(
        None, alias='FeatureActivations'
    )
    GlobalConfiguration_1: Optional[GlobalConfiguration] = Field(
        None, alias='GlobalConfiguration'
    )
    MotionGraphicsConfiguration_1: Optional[MotionGraphicsConfiguration] = Field(
        None, alias='MotionGraphicsConfiguration'
    )
    NielsenConfiguration_1: Optional[NielsenConfiguration] = Field(
        None, alias='NielsenConfiguration'
    )
    OutputGroups: Optional[FieldListOfOutputGroup] = None
    TimecodeConfig_1: Optional[TimecodeConfig] = Field(None, alias='TimecodeConfig')
    VideoDescriptions: Optional[FieldListOfVideoDescription] = None


class EncoderSettings(BaseModel):
    AudioDescriptions: FieldListOfAudioDescription
    AvailBlanking_1: Optional[AvailBlanking] = Field(None, alias='AvailBlanking')
    AvailConfiguration_1: Optional[AvailConfiguration] = Field(
        None, alias='AvailConfiguration'
    )
    BlackoutSlate_1: Optional[BlackoutSlate] = Field(None, alias='BlackoutSlate')
    CaptionDescriptions: Optional[FieldListOfCaptionDescription] = None
    FeatureActivations_1: Optional[FeatureActivations] = Field(
        None, alias='FeatureActivations'
    )
    GlobalConfiguration_1: Optional[GlobalConfiguration] = Field(
        None, alias='GlobalConfiguration'
    )
    MotionGraphicsConfiguration_1: Optional[MotionGraphicsConfiguration] = Field(
        None, alias='MotionGraphicsConfiguration'
    )
    NielsenConfiguration_1: Optional[NielsenConfiguration] = Field(
        None, alias='NielsenConfiguration'
    )
    OutputGroups: FieldListOfOutputGroup
    TimecodeConfig_1: TimecodeConfig = Field(..., alias='TimecodeConfig')
    VideoDescriptions: FieldListOfVideoDescription


class InputAttachment(BaseModel):
    AutomaticInputFailoverSettings_1: Optional[AutomaticInputFailoverSettings] = Field(
        None, alias='AutomaticInputFailoverSettings'
    )
    InputAttachmentName: Optional[FieldString] = None
    InputId: Optional[FieldString] = None
    InputSettings_1: Optional[InputSettings] = Field(None, alias='InputSettings')


class ScheduleAction(BaseModel):
    ActionName: FieldString
    ScheduleActionSettings_1: ScheduleActionSettings = Field(
        ..., alias='ScheduleActionSettings'
    )
    ScheduleActionStartSettings_1: ScheduleActionStartSettings = Field(
        ..., alias='ScheduleActionStartSettings'
    )


class FieldListOfInputAttachment(RootModel[List[InputAttachment]]):
    root: List[InputAttachment] = Field(
        ..., description='Placeholder documentation for __listOfInputAttachment'
    )


class FieldListOfScheduleAction(RootModel[List[ScheduleAction]]):
    root: List[ScheduleAction] = Field(
        ..., description='Placeholder documentation for __listOfScheduleAction'
    )


class ProdChannelsPostRequest(BaseModel):
    cdiInputSpecification: Optional[CdiInputSpecification] = Field(
        None, description='Placeholder documentation for CdiInputSpecification'
    )
    channelClass: Optional[ChannelClass] = Field(
        None,
        description='A standard channel has two encoding pipelines and a single pipeline channel only has one.',
    )
    destinations: Optional[List[OutputDestination]] = Field(
        None, description='Placeholder documentation for __listOfOutputDestination'
    )
    encoderSettings: Optional[EncoderSettings1] = Field(
        None, description='Encoder Settings'
    )
    inputAttachments: Optional[List[InputAttachment]] = Field(
        None, description='Placeholder documentation for __listOfInputAttachment'
    )
    inputSpecification: Optional[InputSpecification] = Field(
        None, description='Placeholder documentation for InputSpecification'
    )
    logLevel: Optional[LogLevel] = Field(
        None, description='The log level the user wants for their channel.'
    )
    maintenance: Optional[Maintenance] = Field(
        None, description='Placeholder documentation for MaintenanceCreateSettings'
    )
    name: Optional[str] = Field(
        None, description='Placeholder documentation for __string'
    )
    requestId: Optional[str] = Field(
        None, description='Placeholder documentation for __string'
    )
    reserved: Optional[str] = Field(
        None, description='Placeholder documentation for __string'
    )
    roleArn: Optional[str] = Field(
        None, description='Placeholder documentation for __string'
    )
    tags: Optional[Dict[str, FieldString]] = Field(
        None, description='Placeholder documentation for Tags'
    )
    vpc: Optional[Vpc] = Field(
        None,
        description='The properties for a private VPC Output\nWhen this property is specified, the output egress addresses will be created in a user specified VPC\n',
    )


class ProdChannelsChannelIdPutRequest(BaseModel):
    cdiInputSpecification: Optional[CdiInputSpecification] = Field(
        None, description='Placeholder documentation for CdiInputSpecification'
    )
    destinations: Optional[List[OutputDestination]] = Field(
        None, description='Placeholder documentation for __listOfOutputDestination'
    )
    encoderSettings: Optional[EncoderSettings1] = Field(
        None, description='Encoder Settings'
    )
    inputAttachments: Optional[List[InputAttachment]] = Field(
        None, description='Placeholder documentation for __listOfInputAttachment'
    )
    inputSpecification: Optional[InputSpecification] = Field(
        None, description='Placeholder documentation for InputSpecification'
    )
    logLevel: Optional[LogLevel] = Field(
        None, description='The log level the user wants for their channel.'
    )
    maintenance: Optional[Maintenance1] = Field(
        None, description='Placeholder documentation for MaintenanceUpdateSettings'
    )
    name: Optional[str] = Field(
        None, description='Placeholder documentation for __string'
    )
    roleArn: Optional[str] = Field(
        None, description='Placeholder documentation for __string'
    )


class Creates(BaseModel):
    ScheduleActions: Optional[FieldListOfScheduleAction] = None


class ProdChannelsChannelIdSchedulePutRequest(BaseModel):
    creates: Optional[Creates] = Field(
        None,
        description='A list of schedule actions to create (in a request) or that have been created (in a response).',
    )
    deletes: Optional[Deletes] = Field(
        None, description='A list of schedule actions to delete.'
    )


class BatchScheduleActionCreateRequest(BaseModel):
    ScheduleActions: FieldListOfScheduleAction


class BatchScheduleActionCreateResult(BaseModel):
    ScheduleActions: FieldListOfScheduleAction


class BatchScheduleActionDeleteResult(BaseModel):
    ScheduleActions: FieldListOfScheduleAction


class BatchUpdateScheduleRequest(BaseModel):
    Creates: Optional[BatchScheduleActionCreateRequest] = None
    Deletes: Optional[BatchScheduleActionDeleteRequest] = None


class BatchUpdateScheduleResponse(BaseModel):
    Creates: Optional[BatchScheduleActionCreateResult] = None
    Deletes: Optional[BatchScheduleActionDeleteResult] = None


class Channel(BaseModel):
    Arn: Optional[FieldString] = None
    CdiInputSpecification_1: Optional[CdiInputSpecification] = Field(
        None, alias='CdiInputSpecification'
    )
    ChannelClass_1: Optional[ChannelClass] = Field(None, alias='ChannelClass')
    Destinations: Optional[FieldListOfOutputDestination] = None
    EgressEndpoints: Optional[FieldListOfChannelEgressEndpoint] = None
    EncoderSettings_1: Optional[EncoderSettings] = Field(None, alias='EncoderSettings')
    Id: Optional[FieldString] = None
    InputAttachments: Optional[FieldListOfInputAttachment] = None
    InputSpecification_1: Optional[InputSpecification] = Field(
        None, alias='InputSpecification'
    )
    LogLevel_1: Optional[LogLevel] = Field(None, alias='LogLevel')
    Maintenance: Optional[MaintenanceStatus] = None
    Name: Optional[FieldString] = None
    PipelineDetails: Optional[FieldListOfPipelineDetail] = None
    PipelinesRunningCount: Optional[FieldInteger] = None
    RoleArn: Optional[FieldString] = None
    State: Optional[ChannelState] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    Vpc: Optional[VpcOutputSettingsDescription] = None


class ChannelSummary(BaseModel):
    Arn: Optional[FieldString] = None
    CdiInputSpecification_1: Optional[CdiInputSpecification] = Field(
        None, alias='CdiInputSpecification'
    )
    ChannelClass_1: Optional[ChannelClass] = Field(None, alias='ChannelClass')
    Destinations: Optional[FieldListOfOutputDestination] = None
    EgressEndpoints: Optional[FieldListOfChannelEgressEndpoint] = None
    Id: Optional[FieldString] = None
    InputAttachments: Optional[FieldListOfInputAttachment] = None
    InputSpecification_1: Optional[InputSpecification] = Field(
        None, alias='InputSpecification'
    )
    LogLevel_1: Optional[LogLevel] = Field(None, alias='LogLevel')
    Maintenance: Optional[MaintenanceStatus] = None
    Name: Optional[FieldString] = None
    PipelinesRunningCount: Optional[FieldInteger] = None
    RoleArn: Optional[FieldString] = None
    State: Optional[ChannelState] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    Vpc: Optional[VpcOutputSettingsDescription] = None


class CreateChannelRequest(BaseModel):
    CdiInputSpecification_1: Optional[CdiInputSpecification] = Field(
        None, alias='CdiInputSpecification'
    )
    ChannelClass_1: Optional[ChannelClass] = Field(None, alias='ChannelClass')
    Destinations: Optional[FieldListOfOutputDestination] = None
    EncoderSettings_1: Optional[EncoderSettings] = Field(None, alias='EncoderSettings')
    InputAttachments: Optional[FieldListOfInputAttachment] = None
    InputSpecification_1: Optional[InputSpecification] = Field(
        None, alias='InputSpecification'
    )
    LogLevel_1: Optional[LogLevel] = Field(None, alias='LogLevel')
    Maintenance: Optional[MaintenanceCreateSettings] = None
    Name: Optional[FieldString] = None
    RequestId: Optional[FieldString] = None
    Reserved: Optional[FieldString] = None
    RoleArn: Optional[FieldString] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    Vpc: Optional[VpcOutputSettings] = None


class CreateChannelResponse(BaseModel):
    Channel_1: Optional[Channel] = Field(None, alias='Channel')


class DeleteChannelResponse(BaseModel):
    Arn: Optional[FieldString] = None
    CdiInputSpecification_1: Optional[CdiInputSpecification] = Field(
        None, alias='CdiInputSpecification'
    )
    ChannelClass_1: Optional[ChannelClass] = Field(None, alias='ChannelClass')
    Destinations: Optional[FieldListOfOutputDestination] = None
    EgressEndpoints: Optional[FieldListOfChannelEgressEndpoint] = None
    EncoderSettings_1: Optional[EncoderSettings] = Field(None, alias='EncoderSettings')
    Id: Optional[FieldString] = None
    InputAttachments: Optional[FieldListOfInputAttachment] = None
    InputSpecification_1: Optional[InputSpecification] = Field(
        None, alias='InputSpecification'
    )
    LogLevel_1: Optional[LogLevel] = Field(None, alias='LogLevel')
    Maintenance: Optional[MaintenanceStatus] = None
    Name: Optional[FieldString] = None
    PipelineDetails: Optional[FieldListOfPipelineDetail] = None
    PipelinesRunningCount: Optional[FieldInteger] = None
    RoleArn: Optional[FieldString] = None
    State: Optional[ChannelState] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    Vpc: Optional[VpcOutputSettingsDescription] = None


class DescribeChannelResponse(BaseModel):
    Arn: Optional[FieldString] = None
    CdiInputSpecification_1: Optional[CdiInputSpecification] = Field(
        None, alias='CdiInputSpecification'
    )
    ChannelClass_1: Optional[ChannelClass] = Field(None, alias='ChannelClass')
    Destinations: Optional[FieldListOfOutputDestination] = None
    EgressEndpoints: Optional[FieldListOfChannelEgressEndpoint] = None
    EncoderSettings_1: Optional[EncoderSettings] = Field(None, alias='EncoderSettings')
    Id: Optional[FieldString] = None
    InputAttachments: Optional[FieldListOfInputAttachment] = None
    InputSpecification_1: Optional[InputSpecification] = Field(
        None, alias='InputSpecification'
    )
    LogLevel_1: Optional[LogLevel] = Field(None, alias='LogLevel')
    Maintenance: Optional[MaintenanceStatus] = None
    Name: Optional[FieldString] = None
    PipelineDetails: Optional[FieldListOfPipelineDetail] = None
    PipelinesRunningCount: Optional[FieldInteger] = None
    RoleArn: Optional[FieldString] = None
    State: Optional[ChannelState] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    Vpc: Optional[VpcOutputSettingsDescription] = None


class DescribeScheduleResponse(BaseModel):
    NextToken: Optional[FieldString] = None
    ScheduleActions: Optional[FieldListOfScheduleAction] = None


class StartChannelResponse(BaseModel):
    Arn: Optional[FieldString] = None
    CdiInputSpecification_1: Optional[CdiInputSpecification] = Field(
        None, alias='CdiInputSpecification'
    )
    ChannelClass_1: Optional[ChannelClass] = Field(None, alias='ChannelClass')
    Destinations: Optional[FieldListOfOutputDestination] = None
    EgressEndpoints: Optional[FieldListOfChannelEgressEndpoint] = None
    EncoderSettings_1: Optional[EncoderSettings] = Field(None, alias='EncoderSettings')
    Id: Optional[FieldString] = None
    InputAttachments: Optional[FieldListOfInputAttachment] = None
    InputSpecification_1: Optional[InputSpecification] = Field(
        None, alias='InputSpecification'
    )
    LogLevel_1: Optional[LogLevel] = Field(None, alias='LogLevel')
    Maintenance: Optional[MaintenanceStatus] = None
    Name: Optional[FieldString] = None
    PipelineDetails: Optional[FieldListOfPipelineDetail] = None
    PipelinesRunningCount: Optional[FieldInteger] = None
    RoleArn: Optional[FieldString] = None
    State: Optional[ChannelState] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    Vpc: Optional[VpcOutputSettingsDescription] = None


class StopChannelResponse(BaseModel):
    Arn: Optional[FieldString] = None
    CdiInputSpecification_1: Optional[CdiInputSpecification] = Field(
        None, alias='CdiInputSpecification'
    )
    ChannelClass_1: Optional[ChannelClass] = Field(None, alias='ChannelClass')
    Destinations: Optional[FieldListOfOutputDestination] = None
    EgressEndpoints: Optional[FieldListOfChannelEgressEndpoint] = None
    EncoderSettings_1: Optional[EncoderSettings] = Field(None, alias='EncoderSettings')
    Id: Optional[FieldString] = None
    InputAttachments: Optional[FieldListOfInputAttachment] = None
    InputSpecification_1: Optional[InputSpecification] = Field(
        None, alias='InputSpecification'
    )
    LogLevel_1: Optional[LogLevel] = Field(None, alias='LogLevel')
    Maintenance: Optional[MaintenanceStatus] = None
    Name: Optional[FieldString] = None
    PipelineDetails: Optional[FieldListOfPipelineDetail] = None
    PipelinesRunningCount: Optional[FieldInteger] = None
    RoleArn: Optional[FieldString] = None
    State: Optional[ChannelState] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    Vpc: Optional[VpcOutputSettingsDescription] = None


class UpdateChannelClassResponse(BaseModel):
    Channel_1: Optional[Channel] = Field(None, alias='Channel')


class UpdateChannelRequest(BaseModel):
    CdiInputSpecification_1: Optional[CdiInputSpecification] = Field(
        None, alias='CdiInputSpecification'
    )
    Destinations: Optional[FieldListOfOutputDestination] = None
    EncoderSettings_1: Optional[EncoderSettings] = Field(None, alias='EncoderSettings')
    InputAttachments: Optional[FieldListOfInputAttachment] = None
    InputSpecification_1: Optional[InputSpecification] = Field(
        None, alias='InputSpecification'
    )
    LogLevel_1: Optional[LogLevel] = Field(None, alias='LogLevel')
    Maintenance: Optional[MaintenanceUpdateSettings] = None
    Name: Optional[FieldString] = None
    RoleArn: Optional[FieldString] = None


class UpdateChannelResponse(BaseModel):
    Channel_1: Optional[Channel] = Field(None, alias='Channel')


class FieldListOfChannelSummary(RootModel[List[ChannelSummary]]):
    root: List[ChannelSummary] = Field(
        ..., description='Placeholder documentation for __listOfChannelSummary'
    )


class ListChannelsResponse(BaseModel):
    Channels: Optional[FieldListOfChannelSummary] = None
    NextToken: Optional[FieldString] = None
